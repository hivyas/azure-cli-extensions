# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.core import PipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

    from azure.core.credentials import TokenCredential

from ._configuration import VideoAnalyzerConfiguration
from .operations import edgemodulesOperations
from .operations import pipelinetopologiesOperations
from .operations import livepipelinesOperations
from .operations import pipelinejobsOperations
from .operations import livepipelineoperationstatusesOperations
from .operations import pipelinejoboperationstatusesOperations
from .operations import operationsOperations
from .operations import videoanalyzersOperations
from .operations import privatelinkresourcesOperations
from .operations import privateendpointconnectionsOperations
from .operations import operationstatusesOperations
from .operations import operationresultsOperations
from .operations import videoanalyzeroperationstatusesOperations
from .operations import videoanalyzeroperationresultsOperations
from .operations import locationsOperations
from .operations import videosOperations
from .operations import accesspoliciesOperations
from . import models


class VideoAnalyzer(object):
    """Azure Video Analyzer provides a platform for you to build intelligent video applications that span the edge and the cloud.

    :ivar edgemodules: edgemodulesOperations operations
    :vartype edgemodules: video_analyzer.operations.edgemodulesOperations
    :ivar pipelinetopologies: pipelinetopologiesOperations operations
    :vartype pipelinetopologies: video_analyzer.operations.pipelinetopologiesOperations
    :ivar livepipelines: livepipelinesOperations operations
    :vartype livepipelines: video_analyzer.operations.livepipelinesOperations
    :ivar pipelinejobs: pipelinejobsOperations operations
    :vartype pipelinejobs: video_analyzer.operations.pipelinejobsOperations
    :ivar livepipelineoperationstatuses: livepipelineoperationstatusesOperations operations
    :vartype livepipelineoperationstatuses: video_analyzer.operations.livepipelineoperationstatusesOperations
    :ivar pipelinejoboperationstatuses: pipelinejoboperationstatusesOperations operations
    :vartype pipelinejoboperationstatuses: video_analyzer.operations.pipelinejoboperationstatusesOperations
    :ivar operations: operationsOperations operations
    :vartype operations: video_analyzer.operations.operationsOperations
    :ivar videoanalyzers: videoanalyzersOperations operations
    :vartype videoanalyzers: video_analyzer.operations.videoanalyzersOperations
    :ivar privatelinkresources: privatelinkresourcesOperations operations
    :vartype privatelinkresources: video_analyzer.operations.privatelinkresourcesOperations
    :ivar privateendpointconnections: privateendpointconnectionsOperations operations
    :vartype privateendpointconnections: video_analyzer.operations.privateendpointconnectionsOperations
    :ivar operationstatuses: operationstatusesOperations operations
    :vartype operationstatuses: video_analyzer.operations.operationstatusesOperations
    :ivar operationresults: operationresultsOperations operations
    :vartype operationresults: video_analyzer.operations.operationresultsOperations
    :ivar videoanalyzeroperationstatuses: videoanalyzeroperationstatusesOperations operations
    :vartype videoanalyzeroperationstatuses: video_analyzer.operations.videoanalyzeroperationstatusesOperations
    :ivar videoanalyzeroperationresults: videoanalyzeroperationresultsOperations operations
    :vartype videoanalyzeroperationresults: video_analyzer.operations.videoanalyzeroperationresultsOperations
    :ivar locations: locationsOperations operations
    :vartype locations: video_analyzer.operations.locationsOperations
    :ivar videos: videosOperations operations
    :vartype videos: video_analyzer.operations.videosOperations
    :ivar accesspolicies: accesspoliciesOperations operations
    :vartype accesspolicies: video_analyzer.operations.accesspoliciesOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials.TokenCredential
    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        subscription_id,  # type: str
        base_url=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = VideoAnalyzerConfiguration(credential, subscription_id, **kwargs)
        self._client = PipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.edgemodules = edgemodulesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.pipelinetopologies = pipelinetopologiesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.livepipelines = livepipelinesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.pipelinejobs = pipelinejobsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.livepipelineoperationstatuses = livepipelineoperationstatusesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.pipelinejoboperationstatuses = pipelinejoboperationstatusesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operations = operationsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.videoanalyzers = videoanalyzersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.privatelinkresources = privatelinkresourcesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.privateendpointconnections = privateendpointconnectionsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operationstatuses = operationstatusesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operationresults = operationresultsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.videoanalyzeroperationstatuses = videoanalyzeroperationstatusesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.videoanalyzeroperationresults = videoanalyzeroperationresultsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.locations = locationsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.videos = videosOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.accesspolicies = accesspoliciesOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> VideoAnalyzer
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
