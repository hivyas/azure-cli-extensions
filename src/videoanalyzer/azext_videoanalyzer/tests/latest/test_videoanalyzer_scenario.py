# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from azure.cli.testsdk import StorageAccountPreparer
from .example_steps import step_accesspolicy_create
from .example_steps import step_accesspolicy_show
from .example_steps import step_accesspolicy_list
from .example_steps import step_accesspolicy_update
from .example_steps import step_accesspolicy_delete
from .example_steps import step_edgemodule_create
from .example_steps import step_edgemodule_show
from .example_steps import step_edgemodule_list
from .example_steps import step_edgemodule_list_provisioning_token
from .example_steps import step_edgemodule_delete
from .example_steps import step_livepipeline_create
from .example_steps import step_livepipeline_list
from .example_steps import step_livepipeline_show
from .example_steps import step_livepipeline_update
from .example_steps import step_livepipeline_activate
from .example_steps import step_livepipeline_deactivate
from .example_steps import step_livepipelineoperationstatuses_show
from .example_steps import step_livepipeline_delete
from .example_steps import step_operationresult_show
from .example_steps import step_operationstatuses_show
from .example_steps import step_pipelinejob_create
from .example_steps import step_pipelinejob_show
from .example_steps import step_pipelinejob_list
from .example_steps import step_pipelinejob_update
from .example_steps import step_pipelinejob_cancel
from .example_steps import step_pipelinejoboperationstatuses_show
from .example_steps import step_pipelinejob_delete
from .example_steps import step_pipelinetopology_create
from .example_steps import step_pipelinetopology_show
from .example_steps import step_pipelinetopology_list
from .example_steps import step_pipelinetopology_update
from .example_steps import step_pipelinetopology_delete
from .example_steps import step_privateendpointconnection_create
from .example_steps import step_privateendpointconnection_list
from .example_steps import step_privateendpointconnection_show
from .example_steps import step_privateendpointconnection_delete
from .example_steps import step_privatelinkresource_show
from .example_steps import step_privatelinkresource_list
from .example_steps import step_videoanalyzeroperationresult_show
from .example_steps import step_videoanalyzeroperationstatuses_show
from .example_steps import step_videoanalyzeroperationstatuses_show2
from .example_steps import step_videoanalyzeroperationstatuses_show3
from .example_steps import step_create
from .example_steps import step_show
from .example_steps import step_list
from .example_steps import step_list2
from .example_steps import step_update
from .example_steps import step_delete
from .example_steps import step_video_create
from .example_steps import step_video_show
from .example_steps import step_video_list
from .example_steps import step_video_update
from .example_steps import step_video_list_content_token
from .example_steps import step_video_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test):
    setup_scenario(test)
    step_accesspolicy_create(test, checks=[
        test.check("name", "{myAccessPolicy}", case_sensitive=False),
    ])
    step_accesspolicy_show(test, checks=[
        test.check("name", "{myAccessPolicy}", case_sensitive=False),
    ])
    step_accesspolicy_list(test, checks=[])
    step_accesspolicy_update(test, checks=[
        test.check("name", "{myAccessPolicy}", case_sensitive=False),
    ])
    step_accesspolicy_delete(test, checks=[])
    step_edgemodule_create(test, checks=[
        test.check("name", "{myEdgeModule}", case_sensitive=False),
    ])
    step_edgemodule_show(test, checks=[
        test.check("name", "{myEdgeModule}", case_sensitive=False),
    ])
    step_edgemodule_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_edgemodule_list_provisioning_token(test, checks=[])
    step_edgemodule_delete(test, checks=[])
    step_livepipeline_create(test, checks=[
        test.check("name", "{myLivePipeline}", case_sensitive=False),
        test.check("description", "Live Pipeline 1 Description", case_sensitive=False),
        test.check("bitrateKbps", 500),
        test.check("topologyName", "pipelinetopology1", case_sensitive=False),
    ])
    step_livepipeline_list(test, checks=[])
    step_livepipeline_show(test, checks=[
        test.check("name", "{myLivePipeline}", case_sensitive=False),
        test.check("description", "Live Pipeline 1 Description", case_sensitive=False),
        test.check("bitrateKbps", 500),
        test.check("topologyName", "pipelinetopology1", case_sensitive=False),
    ])
    step_livepipeline_update(test, checks=[
        test.check("name", "{myLivePipeline}", case_sensitive=False),
        test.check("description", "Live Pipeline 1 Description", case_sensitive=False),
        test.check("bitrateKbps", 500),
        test.check("topologyName", "pipelinetopology1", case_sensitive=False),
    ])
    step_livepipeline_activate(test, checks=[])
    step_livepipeline_deactivate(test, checks=[])
    step_livepipelineoperationstatuses_show(test, checks=[])
    step_livepipeline_delete(test, checks=[])
    step_operationresult_show(test, checks=[])
    step_operationstatuses_show(test, checks=[])
    step_pipelinejob_create(test, checks=[
        test.check("topologyName", "pipelinetopology1", case_sensitive=False),
        test.check("name", "{myPipelineJob}", case_sensitive=False),
    ])
    step_pipelinejob_show(test, checks=[
        test.check("topologyName", "pipelinetopology1", case_sensitive=False),
        test.check("name", "{myPipelineJob}", case_sensitive=False),
    ])
    step_pipelinejob_list(test, checks=[])
    step_pipelinejob_update(test, checks=[
        test.check("description", "Pipeline Job 1 description", case_sensitive=False),
        test.check("topologyName", "pipelinetopology1", case_sensitive=False),
        test.check("name", "{myPipelineJob}", case_sensitive=False),
    ])
    step_pipelinejob_cancel(test, checks=[])
    step_pipelinejoboperationstatuses_show(test, checks=[])
    step_pipelinejob_delete(test, checks=[])
    step_pipelinetopology_create(test, checks=[
        test.check("kind", "Live", case_sensitive=False),
        test.check("description", "Pipeline Topology 1 Description", case_sensitive=False),
        test.check("sinks[0].name", "videoSink", case_sensitive=False),
        test.check("sinks[0].@type", "#Microsoft.VideoAnalyzer.VideoSink", case_sensitive=False),
        test.check("sinks[0].inputs[0].nodeName", "rtspSource", case_sensitive=False),
        test.check("sinks[0].videoCreationProperties.description", "Parking lot south entrance", case_sensitive=False),
        test.check("sinks[0].videoCreationProperties.segmentLength", "PT30S", case_sensitive=False),
        test.check("sinks[0].videoCreationProperties.title", "Parking Lot (Camera 1)", case_sensitive=False),
        test.check("sinks[0].videoName", "camera001", case_sensitive=False),
        test.check("sinks[0].videoPublishingOptions.disableArchive", "false", case_sensitive=False),
        test.check("sinks[0].videoPublishingOptions.disableRtspPublishing", "true", case_sensitive=False),
        test.check("sku.name", "Live_S1", case_sensitive=False),
        test.check("name", "{myPipelineTopology}", case_sensitive=False),
    ])
    step_pipelinetopology_show(test, checks=[
        test.check("kind", "Live", case_sensitive=False),
        test.check("description", "Pipeline Topology 1 Description", case_sensitive=False),
        test.check("sku.name", "Live_S1", case_sensitive=False),
        test.check("name", "{myPipelineTopology}", case_sensitive=False),
    ])
    step_pipelinetopology_list(test, checks=[])
    step_pipelinetopology_update(test, checks=[
        test.check("kind", "Live", case_sensitive=False),
        test.check("description", "Pipeline Topology 1 Description", case_sensitive=False),
        test.check("sku.name", "Live_S1", case_sensitive=False),
        test.check("name", "{myPipelineTopology}", case_sensitive=False),
    ])
    step_pipelinetopology_delete(test, checks=[])
    step_privateendpointconnection_create(test, checks=[])
    step_privateendpointconnection_list(test, checks=[])
    step_privateendpointconnection_show(test, checks=[])
    step_privateendpointconnection_delete(test, checks=[])
    step_privatelinkresource_show(test, checks=[])
    step_privatelinkresource_list(test, checks=[])
    step_videoanalyzeroperationresult_show(test, checks=[])
    step_videoanalyzeroperationstatuses_show(test, checks=[])
    step_videoanalyzeroperationstatuses_show2(test, checks=[])
    step_videoanalyzeroperationstatuses_show3(test, checks=[])
    step_create(test, checks=[])
    step_show(test, checks=[])
    step_list(test, checks=[])
    step_list2(test, checks=[])
    step_update(test, checks=[])
    step_delete(test, checks=[])
    step_video_create(test, checks=[
        test.check("description", "Sample Description 1", case_sensitive=False),
        test.check("title", "Sample Title 1", case_sensitive=False),
        test.check("name", "{myVideo}", case_sensitive=False),
    ])
    step_video_show(test, checks=[
        test.check("description", "Sample Description 1", case_sensitive=False),
        test.check("title", "Sample Title 1", case_sensitive=False),
        test.check("name", "{myVideo}", case_sensitive=False),
    ])
    step_video_list(test, checks=[])
    step_video_update(test, checks=[
        test.check("description", "Parking Lot East Entrance", case_sensitive=False),
        test.check("title", "Sample Title 1", case_sensitive=False),
        test.check("name", "{myVideo}", case_sensitive=False),
    ])
    step_video_list_content_token(test, checks=[])
    step_video_delete(test, checks=[])
    cleanup_scenario(test)


# Test class for Scenario
@try_manual
class VideoanalyzerScenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(VideoanalyzerScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myEdgeModule': 'edgeModule1',
            'myPipelineTopology': 'pipelineTopology1',
            'myLivePipeline': 'livePipeline1',
            'myPipelineJob': 'pipelineJob1',
            'myVideo': 'video1',
            'myVideo2': 'video3',
            'myAccessPolicy': 'accessPolicyName1',
        })

    @ResourceGroupPreparer(name_prefix='clitestvideoanalyzer_rg'[:7], key='rg_3', parameter_name='rg_3')
    @ResourceGroupPreparer(name_prefix='clitestvideoanalyzer_testrg'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitestvideoanalyzer_contoso'[:7], key='rg_2', parameter_name='rg_2')
    @StorageAccountPreparer(name_prefix='clitestvideoanalyzer_storage1'[:7], key='sa',
                            resource_group_parameter_name='rg_3')
    def test_videoanalyzer_Scenario(self, rg_3, rg, rg_2):
        call_scenario(self)
        calc_coverage(__file__)
        raise_if()
