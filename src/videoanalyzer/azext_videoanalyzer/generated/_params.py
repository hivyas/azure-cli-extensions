# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import (
    get_default_location_from_resource_group,
    validate_file_or_dict
)
from azext_videoanalyzer.action import (
    AddVideoanalyzerPipelinetopologyCreateParameters,
    AddVideoanalyzerPipelinetopologyCreateSources,
    AddVideoanalyzerPipelinetopologyUpdateParameters,
    AddVideoanalyzerPipelinetopologyUpdateSources,
    AddVideoanalyzerLivepipelineCreateParameters,
    AddVideoanalyzerLivepipelineUpdateParameters,
    AddVideoanalyzerPipelinejobCreateParameters,
    AddVideoanalyzerPipelinejobUpdateParameters,
    AddVideoanalyzerCreateStorageAccounts,
    AddVideoanalyzerCreateIotHubs,
    AddVideoanalyzerUpdateStorageAccounts,
    AddVideoanalyzerUpdateIotHubs,
    AddPrivateLinkServiceConnectionState,
    AddJwtauthentication
)


def load_arguments(self, _):

    with self.argument_context('videoanalyzer edgemodule list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('top', type=int, help='Specifies a non-negative integer n that limits the number of items returned '
                   'from a collection. The service returns the number of available items up to but not greater than '
                   'the specified value n.')

    with self.argument_context('videoanalyzer edgemodule show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('edge_module_name', options_list=['--name', '-n', '--edge-module-name'], type=str, help='The Edge '
                   'Module name.', id_part='child_name_1')

    with self.argument_context('videoanalyzer edgemodule create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('edge_module_name', options_list=['--name', '-n', '--edge-module-name'], type=str, help='The Edge '
                   'Module name.')

    with self.argument_context('videoanalyzer edgemodule update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('edge_module_name', options_list=['--name', '-n', '--edge-module-name'], type=str, help='The Edge '
                   'Module name.', id_part='child_name_1')

    with self.argument_context('videoanalyzer edgemodule delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('edge_module_name', options_list=['--name', '-n', '--edge-module-name'], type=str, help='The Edge '
                   'Module name.', id_part='child_name_1')

    with self.argument_context('videoanalyzer edgemodule list-provisioning-token') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('edge_module_name', options_list=['--name', '-n', '--edge-module-name'], type=str, help='The Edge '
                   'Module name.')
        c.argument('expiration_date', help='The desired expiration date of the registration token. The Azure Video '
                   'Analyzer IoT edge module must be initialized and connected to the Internet prior to the token '
                   'expiration date.')

    with self.argument_context('videoanalyzer pipelinetopology list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('filter_', options_list=['--filter'], type=str, help='Restricts the set of items returned.')
        c.argument('top', type=int, help='Specifies a non-negative integer n that limits the number of items returned '
                   'from a collection. The service returns the number of available items up to but not greater than '
                   'the specified value n.')

    with self.argument_context('videoanalyzer pipelinetopology show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('pipeline_topology_name', options_list=['--name', '-n', '--pipeline-topology-name'], type=str,
                   help='Pipeline topology unique identifier.', id_part='child_name_1')

    with self.argument_context('videoanalyzer pipelinetopology create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('pipeline_topology_name', type=str, help='Pipeline topology unique identifier.')
        c.argument('kind', arg_type=get_enum_type(['Live', 'Batch']), help='Topology kind.')
        c.argument('description', type=str, help='An optional description of the pipeline topology. It is recommended '
                   'that the expected use of the topology to be described here.')
        c.argument('parameters_', options_list=['--parameters'],
                   action=AddVideoanalyzerPipelinetopologyCreateParameters, nargs='+', help='List of the topology '
                   'parameter declarations. Parameters declared here can be referenced throughout the topology nodes '
                   'through the use of "${PARAMETER_NAME}" string pattern. Parameters can have optional default values '
                   'and can later be defined in individual instances of the pipeline.')
        c.argument('sources', action=AddVideoanalyzerPipelinetopologyCreateSources, nargs='+', help='List of the '
                   'topology source nodes. Source nodes enable external data to be ingested by the pipeline.')
        c.argument('processors', type=validate_file_or_dict, help='List of the topology processor nodes. Processor '
                   'nodes enable pipeline data to be analyzed, processed or transformed. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('sinks', type=validate_file_or_dict, help='List of the topology sink nodes. Sink nodes allow '
                   'pipeline data to be stored or exported. Expected value: json-string/json-file/@json-file.')
        c.argument('name', arg_type=get_enum_type(['Live_S1', 'Batch_S1']), help='The SKU name.', arg_group='Sku')

    with self.argument_context('videoanalyzer pipelinetopology update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('pipeline_topology_name', type=str, help='Pipeline topology unique identifier.',
                   id_part='child_name_1')
        c.argument('kind', arg_type=get_enum_type(['Live', 'Batch']), help='Topology kind.')
        c.argument('description', type=str, help='An optional description of the pipeline topology. It is recommended '
                   'that the expected use of the topology to be described here.')
        c.argument('parameters_', options_list=['--parameters'],
                   action=AddVideoanalyzerPipelinetopologyUpdateParameters, nargs='+', help='List of the topology '
                   'parameter declarations. Parameters declared here can be referenced throughout the topology nodes '
                   'through the use of "${PARAMETER_NAME}" string pattern. Parameters can have optional default values '
                   'and can later be defined in individual instances of the pipeline.')
        c.argument('sources', action=AddVideoanalyzerPipelinetopologyUpdateSources, nargs='+', help='List of the '
                   'topology source nodes. Source nodes enable external data to be ingested by the pipeline.')
        c.argument('processors', type=validate_file_or_dict, help='List of the topology processor nodes. Processor '
                   'nodes enable pipeline data to be analyzed, processed or transformed. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('sinks', type=validate_file_or_dict, help='List of the topology sink nodes. Sink nodes allow '
                   'pipeline data to be stored or exported. Expected value: json-string/json-file/@json-file.')
        c.argument('name', arg_type=get_enum_type(['Live_S1', 'Batch_S1']), help='The SKU name.', arg_group='Sku')

    with self.argument_context('videoanalyzer pipelinetopology delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('pipeline_topology_name', options_list=['--name', '-n', '--pipeline-topology-name'], type=str,
                   help='Pipeline topology unique identifier.', id_part='child_name_1')

    with self.argument_context('videoanalyzer livepipeline list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('filter_', options_list=['--filter'], type=str, help='Restricts the set of items returned.')
        c.argument('top', type=int, help='Specifies a non-negative integer n that limits the number of items returned '
                   'from a collection. The service returns the number of available items up to but not greater than '
                   'the specified value n.')

    with self.argument_context('videoanalyzer livepipeline show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('live_pipeline_name', options_list=['--name', '-n', '--live-pipeline-name'], type=str, help='Live '
                   'pipeline unique identifier.', id_part='child_name_1')

    with self.argument_context('videoanalyzer livepipeline create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('live_pipeline_name', options_list=['--name', '-n', '--live-pipeline-name'], type=str, help='Live '
                   'pipeline unique identifier.')
        c.argument('topology_name', type=str, help='The reference to an existing pipeline topology defined for '
                   'real-time content processing. When activated, this live pipeline will process content according to '
                   'the pipeline topology definition.')
        c.argument('description', type=str, help='An optional description for the pipeline.')
        c.argument('bitrate_kbps', type=int, help='Maximum bitrate capacity in Kbps reserved for the live pipeline. '
                   'The allowed range is from 500 to 3000 Kbps in increments of 100 Kbps. If the RTSP camera exceeds '
                   'this capacity, then the service will disconnect temporarily from the camera. It will retry to '
                   're-establish connection (with exponential backoff), checking to see if the camera bitrate is now '
                   'below the reserved capacity. Doing so will ensure that one \'noisy neighbor\' does not affect '
                   'other live pipelines in your account.')
        c.argument('parameters_', options_list=['--parameters'], action=AddVideoanalyzerLivepipelineCreateParameters,
                   nargs='+', help='List of the instance level parameter values for the user-defined topology '
                   'parameters. A pipeline can only define or override parameters values for parameters which have '
                   'been declared in the referenced topology. Topology parameters without a default value must be '
                   'defined. Topology parameters with a default value can be optionally be overridden.')

    with self.argument_context('videoanalyzer livepipeline update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('live_pipeline_name', options_list=['--name', '-n', '--live-pipeline-name'], type=str, help='Live '
                   'pipeline unique identifier.', id_part='child_name_1')
        c.argument('topology_name', type=str, help='The reference to an existing pipeline topology defined for '
                   'real-time content processing. When activated, this live pipeline will process content according to '
                   'the pipeline topology definition.')
        c.argument('description', type=str, help='An optional description for the pipeline.')
        c.argument('bitrate_kbps', type=int, help='Maximum bitrate capacity in Kbps reserved for the live pipeline. '
                   'The allowed range is from 500 to 3000 Kbps in increments of 100 Kbps. If the RTSP camera exceeds '
                   'this capacity, then the service will disconnect temporarily from the camera. It will retry to '
                   're-establish connection (with exponential backoff), checking to see if the camera bitrate is now '
                   'below the reserved capacity. Doing so will ensure that one \'noisy neighbor\' does not affect '
                   'other live pipelines in your account.')
        c.argument('parameters_', options_list=['--parameters'], action=AddVideoanalyzerLivepipelineUpdateParameters,
                   nargs='+', help='List of the instance level parameter values for the user-defined topology '
                   'parameters. A pipeline can only define or override parameters values for parameters which have '
                   'been declared in the referenced topology. Topology parameters without a default value must be '
                   'defined. Topology parameters with a default value can be optionally be overridden.')

    with self.argument_context('videoanalyzer livepipeline delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('live_pipeline_name', options_list=['--name', '-n', '--live-pipeline-name'], type=str, help='Live '
                   'pipeline unique identifier.', id_part='child_name_1')

    with self.argument_context('videoanalyzer livepipeline activate') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('live_pipeline_name', options_list=['--name', '-n', '--live-pipeline-name'], type=str, help='Live '
                   'pipeline unique identifier.', id_part='child_name_1')

    with self.argument_context('videoanalyzer livepipeline deactivate') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('live_pipeline_name', options_list=['--name', '-n', '--live-pipeline-name'], type=str, help='Live '
                   'pipeline unique identifier.', id_part='child_name_1')

    with self.argument_context('videoanalyzer livepipeline wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('live_pipeline_name', options_list=['--name', '-n', '--live-pipeline-name'], type=str, help='Live '
                   'pipeline unique identifier.', id_part='child_name_1')

    with self.argument_context('videoanalyzer pipelinejob list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('filter_', options_list=['--filter'], type=str, help='Restricts the set of items returned.')
        c.argument('top', type=int, help='Specifies a non-negative integer n that limits the number of items returned '
                   'from a collection. The service returns the number of available items up to but not greater than '
                   'the specified value n.')

    with self.argument_context('videoanalyzer pipelinejob show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('pipeline_job_name', options_list=['--name', '-n', '--pipeline-job-name'], type=str, help='The '
                   'pipeline job name.', id_part='child_name_1')

    with self.argument_context('videoanalyzer pipelinejob create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('pipeline_job_name', options_list=['--name', '-n', '--pipeline-job-name'], type=str, help='The '
                   'pipeline job name.')
        c.argument('topology_name', type=str, help='Reference to an existing pipeline topology. When activated, this '
                   'pipeline job will process content according to the pipeline topology definition.')
        c.argument('description', type=str, help='An optional description for the pipeline.')
        c.argument('parameters_', options_list=['--parameters'], action=AddVideoanalyzerPipelinejobCreateParameters,
                   nargs='+', help='List of the instance level parameter values for the user-defined topology '
                   'parameters. A pipeline can only define or override parameters values for parameters which have '
                   'been declared in the referenced topology. Topology parameters without a default value must be '
                   'defined. Topology parameters with a default value can be optionally be overridden.')

    with self.argument_context('videoanalyzer pipelinejob update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('pipeline_job_name', options_list=['--name', '-n', '--pipeline-job-name'], type=str, help='The '
                   'pipeline job name.', id_part='child_name_1')
        c.argument('topology_name', type=str, help='Reference to an existing pipeline topology. When activated, this '
                   'pipeline job will process content according to the pipeline topology definition.')
        c.argument('description', type=str, help='An optional description for the pipeline.')
        c.argument('parameters_', options_list=['--parameters'], action=AddVideoanalyzerPipelinejobUpdateParameters,
                   nargs='+', help='List of the instance level parameter values for the user-defined topology '
                   'parameters. A pipeline can only define or override parameters values for parameters which have '
                   'been declared in the referenced topology. Topology parameters without a default value must be '
                   'defined. Topology parameters with a default value can be optionally be overridden.')

    with self.argument_context('videoanalyzer pipelinejob delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('pipeline_job_name', options_list=['--name', '-n', '--pipeline-job-name'], type=str, help='The '
                   'pipeline job name.', id_part='child_name_1')

    with self.argument_context('videoanalyzer pipelinejob cancel') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('pipeline_job_name', options_list=['--name', '-n', '--pipeline-job-name'], type=str, help='The '
                   'pipeline job name.', id_part='child_name_1')

    with self.argument_context('videoanalyzer pipelinejob wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('pipeline_job_name', options_list=['--name', '-n', '--pipeline-job-name'], type=str, help='The '
                   'pipeline job name.', id_part='child_name_1')

    with self.argument_context('videoanalyzer livepipelineoperationstatuses show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('live_pipeline_name', type=str, help='Live pipeline unique identifier.', id_part='child_name_1')
        c.argument('operation_id', type=str, help='The operation ID.', id_part='child_name_2')

    with self.argument_context('videoanalyzer pipelinejoboperationstatuses show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('pipeline_job_name', type=str, help='The pipeline job name.', id_part='child_name_1')
        c.argument('operation_id', type=str, help='The operation ID.', id_part='child_name_2')

    with self.argument_context('videoanalyzer list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('videoanalyzer show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.', id_part='name')

    with self.argument_context('videoanalyzer create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('storage_accounts', action=AddVideoanalyzerCreateStorageAccounts, nargs='+', help='The storage '
                   'accounts for this resource.')
        c.argument('iot_hubs', action=AddVideoanalyzerCreateIotHubs, nargs='+',
                   help='The IoT Hubs for this resource.')
        c.argument('public_network_access', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Whether or not '
                   'public network access is allowed for resources under the Video Analyzer account.')
        c.argument('public_network_access_public_network_access', arg_type=get_enum_type(['Enabled', 'Disabled']),
                   help='Whether or not public network access is allowed for specified resources under the Video '
                   'Analyzer account.', arg_group='Network Access Control Consumption')
        c.argument('public_network_access1', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Whether or not '
                   'public network access is allowed for specified resources under the Video Analyzer account.',
                   arg_group='Network Access Control Ingestion')
        c.argument('public_network_access2', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Whether or not '
                   'public network access is allowed for specified resources under the Video Analyzer account.',
                   arg_group='Network Access Control Integration')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemKey', 'CustomerKey']), help='The '
                   'type of key used to encrypt the Account Key.', arg_group='Encryption')
        c.argument('user_assigned_identity', type=str, help='The user assigned managed identity\'s resource identifier '
                   'to use when accessing a resource.', arg_group='Encryption Identity')
        c.argument('key_identifier', type=str, help='The URL of the Key Vault key used to encrypt the account. The key '
                   'may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without '
                   'a version (for example https://vault/keys/mykey).', arg_group='Encryption Key Vault Properties')
        c.argument('video_analyzer_identity_type', type=str, help='The identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The User Assigned Managed Identities. '
                   'Expected value: json-string/json-file/@json-file.', arg_group='Identity')

    with self.argument_context('videoanalyzer update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.', id_part='name')
        c.argument('tags', tags_type)
        c.argument('storage_accounts', action=AddVideoanalyzerUpdateStorageAccounts, nargs='+', help='The storage '
                   'accounts for this resource.')
        c.argument('iot_hubs', action=AddVideoanalyzerUpdateIotHubs, nargs='+',
                   help='The IoT Hubs for this resource.')
        c.argument('public_network_access', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Whether or not '
                   'public network access is allowed for resources under the Video Analyzer account.')
        c.argument('public_network_access_public_network_access', arg_type=get_enum_type(['Enabled', 'Disabled']),
                   help='Whether or not public network access is allowed for specified resources under the Video '
                   'Analyzer account.', arg_group='Network Access Control Consumption')
        c.argument('public_network_access1', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Whether or not '
                   'public network access is allowed for specified resources under the Video Analyzer account.',
                   arg_group='Network Access Control Ingestion')
        c.argument('public_network_access2', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Whether or not '
                   'public network access is allowed for specified resources under the Video Analyzer account.',
                   arg_group='Network Access Control Integration')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemKey', 'CustomerKey']), help='The '
                   'type of key used to encrypt the Account Key.', arg_group='Encryption')
        c.argument('user_assigned_identity', type=str, help='The user assigned managed identity\'s resource identifier '
                   'to use when accessing a resource.', arg_group='Encryption Identity')
        c.argument('key_identifier', type=str, help='The URL of the Key Vault key used to encrypt the account. The key '
                   'may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without '
                   'a version (for example https://vault/keys/mykey).', arg_group='Encryption Key Vault Properties')
        c.argument('video_analyzer_identity_type', type=str, help='The identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The User Assigned Managed Identities. '
                   'Expected value: json-string/json-file/@json-file.', arg_group='Identity')

    with self.argument_context('videoanalyzer delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.', id_part='name')

    with self.argument_context('videoanalyzer wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.', id_part='name')

    with self.argument_context('videoanalyzer privatelinkresource list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.')

    with self.argument_context('videoanalyzer privatelinkresource show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.', id_part='name')
        c.argument('name', type=str, help='Name of the private link resource (Group ID).', id_part='child_name_1')

    with self.argument_context('videoanalyzer privateendpointconnection list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.')

    with self.argument_context('videoanalyzer privateendpointconnection show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.', id_part='name')
        c.argument('name', type=str, help='Private endpoint connection name.', id_part='child_name_1')

    with self.argument_context('videoanalyzer privateendpointconnection create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.')
        c.argument('name', type=str, help='Private endpoint connection name.')
        c.argument('private_link_service_connection_state', action=AddPrivateLinkServiceConnectionState, nargs='+',
                   help='A collection of information about the state of the connection between service consumer and '
                   'provider.')

    with self.argument_context('videoanalyzer privateendpointconnection update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.', id_part='name')
        c.argument('name', type=str, help='Private endpoint connection name.', id_part='child_name_1')
        c.argument('private_link_service_connection_state', action=AddPrivateLinkServiceConnectionState, nargs='+',
                   help='A collection of information about the state of the connection between service consumer and '
                   'provider.')
        c.ignore('parameters')

    with self.argument_context('videoanalyzer privateendpointconnection delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.', id_part='name')
        c.argument('name', type=str, help='Private endpoint connection name.', id_part='child_name_1')

    with self.argument_context('videoanalyzer operationstatuses show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.', id_part='name')
        c.argument('name', type=str, help='Private endpoint connection name.', id_part='child_name_1')
        c.argument('operation_id', type=str, help='Operation Id.', id_part='child_name_2')

    with self.argument_context('videoanalyzer operationresult show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.', id_part='name')
        c.argument('name', type=str, help='Private endpoint connection name.', id_part='child_name_1')
        c.argument('operation_id', type=str, help='Operation Id.', id_part='child_name_2')

    with self.argument_context('videoanalyzer videoanalyzeroperationstatuses show') as c:
        c.argument('location_name', type=str, help='Location name.', id_part='name')
        c.argument('operation_id', type=str, help='Operation Id.', id_part='child_name_1')

    with self.argument_context('videoanalyzer videoanalyzeroperationresult show') as c:
        c.argument('location_name', type=str, help='Location name.', id_part='name')
        c.argument('operation_id', type=str, help='Operation Id.', id_part='child_name_1')

    with self.argument_context('videoanalyzer video list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('top', type=int, help='Specifies a non-negative integer n that limits the number of items returned '
                   'from a collection. The service returns the number of available items up to but not greater than '
                   'the specified value n.')

    with self.argument_context('videoanalyzer video show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('video_name', options_list=['--name', '-n', '--video-name'], type=str, help='The Video name.',
                   id_part='child_name_1')

    with self.argument_context('videoanalyzer video create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('video_name', options_list=['--name', '-n', '--video-name'], type=str, help='The Video name.')
        c.argument('title', type=str, help='Optional video title provided by the user. Value can be up to 256 '
                   'characters long.')
        c.argument('description', type=str, help='Optional video description provided by the user. Value can be up to '
                   '2048 characters long.')
        c.argument('retention_period', type=str, help='Video retention period indicates the maximum age of the video '
                   'archive segments which are intended to be kept in storage. It must be provided in the ISO8601 '
                   'duration format in the granularity of days, up to a maximum of 10 years. For example, if this is '
                   'set to P30D (30 days), content older than 30 days will be periodically deleted. This value can be '
                   'updated at any time and the new desired retention period will be effective within 24 hours.',
                   arg_group='Archival')
        c.argument('segment_length', type=str, help='Video segment length indicates the length of individual video '
                   'files (segments) which are persisted to storage. Smaller segments provide lower archive playback '
                   'latency but generate larger volume of storage transactions. Larger segments reduce the amount of '
                   'storage transactions while increasing the archive playback latency. Value must be specified in '
                   'ISO8601 duration format (i.e. "PT30S" equals 30 seconds) and can vary between 30 seconds to 5 '
                   'minutes, in 30 seconds increments.', arg_group='Media Info')

    with self.argument_context('videoanalyzer video update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('video_name', options_list=['--name', '-n', '--video-name'], type=str, help='The Video name.',
                   id_part='child_name_1')
        c.argument('title', type=str, help='Optional video title provided by the user. Value can be up to 256 '
                   'characters long.')
        c.argument('description', type=str, help='Optional video description provided by the user. Value can be up to '
                   '2048 characters long.')
        c.argument('retention_period', type=str, help='Video retention period indicates the maximum age of the video '
                   'archive segments which are intended to be kept in storage. It must be provided in the ISO8601 '
                   'duration format in the granularity of days, up to a maximum of 10 years. For example, if this is '
                   'set to P30D (30 days), content older than 30 days will be periodically deleted. This value can be '
                   'updated at any time and the new desired retention period will be effective within 24 hours.',
                   arg_group='Archival')
        c.argument('segment_length', type=str, help='Video segment length indicates the length of individual video '
                   'files (segments) which are persisted to storage. Smaller segments provide lower archive playback '
                   'latency but generate larger volume of storage transactions. Larger segments reduce the amount of '
                   'storage transactions while increasing the archive playback latency. Value must be specified in '
                   'ISO8601 duration format (i.e. "PT30S" equals 30 seconds) and can vary between 30 seconds to 5 '
                   'minutes, in 30 seconds increments.', arg_group='Media Info')

    with self.argument_context('videoanalyzer video delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('video_name', options_list=['--name', '-n', '--video-name'], type=str, help='The Video name.',
                   id_part='child_name_1')

    with self.argument_context('videoanalyzer video list-content-token') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('video_name', options_list=['--name', '-n', '--video-name'], type=str, help='The Video name.')

    with self.argument_context('videoanalyzer accesspolicy list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('top', type=int, help='Specifies a non-negative integer n that limits the number of items returned '
                   'from a collection. The service returns the number of available items up to but not greater than '
                   'the specified value n.')

    with self.argument_context('videoanalyzer accesspolicy show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('access_policy_name', options_list=['--name', '-n', '--access-policy-name'], type=str, help='The '
                   'Access Policy name.', id_part='child_name_1')

    with self.argument_context('videoanalyzer accesspolicy create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('access_policy_name', options_list=['--name', '-n', '--access-policy-name'], type=str, help='The '
                   'Access Policy name.')
        c.argument('jwtauthentication', action=AddJwtauthentication, nargs='+', help='Properties for access validation '
                   'based on JSON Web Tokens (JWT).', arg_group='Authentication')

    with self.argument_context('videoanalyzer accesspolicy update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('access_policy_name', options_list=['--name', '-n', '--access-policy-name'], type=str, help='The '
                   'Access Policy name.', id_part='child_name_1')
        c.argument('jwtauthentication', action=AddJwtauthentication, nargs='+', help='Properties for access validation '
                   'based on JSON Web Tokens (JWT).', arg_group='Authentication')

    with self.argument_context('videoanalyzer accesspolicy delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('access_policy_name', options_list=['--name', '-n', '--access-policy-name'], type=str, help='The '
                   'Access Policy name.', id_part='child_name_1')
