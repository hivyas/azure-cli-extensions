# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


# pylint: disable=protected-access

# pylint: disable=no-self-use


import argparse
from collections import defaultdict
from knack.util import CLIError


class AddVideoanalyzerPipelinetopologyUpdateParameters(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddVideoanalyzerPipelinetopologyUpdateParameters, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'name':
                d['name'] = v[0]

            elif kl == 'type':
                d['type'] = v[0]

            elif kl == 'description':
                d['description'] = v[0]

            elif kl == 'default':
                d['default'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter parameters-. All possible keys are: name, type,'
                    ' description, default'.format(k)
                )

        return d


class AddVideoanalyzerPipelinetopologyUpdateSources(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddVideoanalyzerPipelinetopologyUpdateSources, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'type':
                d['type'] = v[0]

            elif kl == 'name':
                d['name'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter sources. All possible keys are: type, name'.format(k)
                )

        return d


class AddVideoanalyzerPipelinetopologyCreateParameters(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddVideoanalyzerPipelinetopologyCreateParameters, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'name':
                d['name'] = v[0]

            elif kl == 'type':
                d['type'] = v[0]

            elif kl == 'description':
                d['description'] = v[0]

            elif kl == 'default':
                d['default'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter parameters-. All possible keys are: name, type,'
                    ' description, default'.format(k)
                )

        return d


class AddVideoanalyzerPipelinetopologyCreateSources(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddVideoanalyzerPipelinetopologyCreateSources, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'type':
                d['type'] = v[0]

            elif kl == 'name':
                d['name'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter sources. All possible keys are: type, name'.format(k)
                )

        return d


class AddVideoanalyzerLivepipelineUpdateParameters(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddVideoanalyzerLivepipelineUpdateParameters, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'name':
                d['name'] = v[0]

            elif kl == 'value':
                d['value'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter parameters-. All possible keys are: name, value'
                    .format(k)
                )

        return d


class AddVideoanalyzerLivepipelineCreateParameters(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddVideoanalyzerLivepipelineCreateParameters, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'name':
                d['name'] = v[0]

            elif kl == 'value':
                d['value'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter parameters-. All possible keys are: name, value'
                    .format(k)
                )

        return d


class AddVideoanalyzerPipelinejobUpdateParameters(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddVideoanalyzerPipelinejobUpdateParameters, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'name':
                d['name'] = v[0]

            elif kl == 'value':
                d['value'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter parameters-. All possible keys are: name, value'
                    .format(k)
                )

        return d


class AddVideoanalyzerPipelinejobCreateParameters(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddVideoanalyzerPipelinejobCreateParameters, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'name':
                d['name'] = v[0]

            elif kl == 'value':
                d['value'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter parameters-. All possible keys are: name, value'
                    .format(k)
                )

        return d


class AddVideoanalyzerUpdateStorageAccounts(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddVideoanalyzerUpdateStorageAccounts, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'id':
                d['id'] = v[0]

            elif kl == 'user-assigned-identity':
                sub_d = d
                if 'identity' not in sub_d:
                    sub_d['identity'] = {}
                sub_d = sub_d['identity']

                sub_d['user_assigned_identity'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter storage-accounts. All possible keys are: id,'
                    ' user-assigned-identity'.format(k)
                )

        return d


class AddVideoanalyzerUpdateIotHubs(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddVideoanalyzerUpdateIotHubs, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'id':
                d['id'] = v[0]

            elif kl == 'user-assigned-identity':
                sub_d = d
                if 'identity' not in sub_d:
                    sub_d['identity'] = {}
                sub_d = sub_d['identity']

                sub_d['user_assigned_identity'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter iot-hubs. All possible keys are: id,'
                    ' user-assigned-identity'.format(k)
                )

        return d


class AddVideoanalyzerCreateStorageAccounts(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddVideoanalyzerCreateStorageAccounts, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'id':
                d['id'] = v[0]

            elif kl == 'user-assigned-identity':
                sub_d = d
                if 'identity' not in sub_d:
                    sub_d['identity'] = {}
                sub_d = sub_d['identity']

                sub_d['user_assigned_identity'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter storage-accounts. All possible keys are: id,'
                    ' user-assigned-identity'.format(k)
                )

        return d


class AddVideoanalyzerCreateIotHubs(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddVideoanalyzerCreateIotHubs, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'id':
                d['id'] = v[0]

            elif kl == 'user-assigned-identity':
                sub_d = d
                if 'identity' not in sub_d:
                    sub_d['identity'] = {}
                sub_d = sub_d['identity']

                sub_d['user_assigned_identity'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter iot-hubs. All possible keys are: id,'
                    ' user-assigned-identity'.format(k)
                )

        return d


class AddPrivateLinkServiceConnectionState(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.private_link_service_connection_state = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'status':
                d['status'] = v[0]

            elif kl == 'description':
                d['description'] = v[0]

            elif kl == 'actions-required':
                d['actions_required'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter private-link-service-connection-state. All possible'
                    ' keys are: status, description, actions-required'.format(k)
                )

        return d


class AddJwtauthentication(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.jwtauthentication = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'issuers':
                d['issuers'] = v

            elif kl == 'audiences':
                d['audiences'] = v

            elif kl == 'claims':
                d['claims'] = v

            elif kl == 'keys':
                d['keys'] = v

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter jwtauthentication. All possible keys are: issuers,'
                    ' audiences, claims, keys'.format(k)
                )

        d['type'] = '#Microsoft.VideoAnalyzer.JwtAuthentication'

        return d
