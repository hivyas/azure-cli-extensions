# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals
# pylint: disable=bad-continuation
# pylint: disable=line-too-long

from azure.cli.core.commands import CliCommandType
from azext_videoanalyzer.generated._client_factory import (
    cf_edgemodule,
    cf_pipelinetopology,
    cf_livepipeline,
    cf_pipelinejob,
    cf_livepipelineoperationstatuses,
    cf_pipelinejoboperationstatuses,
    cf_videoanalyzer,
    cf_privatelinkresource,
    cf_privateendpointconnection,
    cf_operationstatuses,
    cf_operationresult,
    cf_videoanalyzeroperationstatuses,
    cf_videoanalyzeroperationresult,
    cf_video,
    cf_accesspolicy,
)


videoanalyzer_videoanalyzer = CliCommandType(
    operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._videoanalyzers_operations#videoanalyzersOperations.{}',
    client_factory=cf_videoanalyzer,
)


videoanalyzer_accesspolicy = CliCommandType(
    operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._accesspolicies_operations#accesspoliciesOperations.{}',
    client_factory=cf_accesspolicy,
)


videoanalyzer_edgemodule = CliCommandType(
    operations_tmpl=(
        'azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._edgemodules_operations#edgemodulesOperations.{}'
    ),
    client_factory=cf_edgemodule,
)


videoanalyzer_livepipeline = CliCommandType(
    operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._livepipelines_operations#livepipelinesOperations.{}',
    client_factory=cf_livepipeline,
)


videoanalyzer_livepipelineoperationstatuses = CliCommandType(
    operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._livepipelineoperationstatuses_operations#livepipelineoperationstatusesOperations.{}',
    client_factory=cf_livepipelineoperationstatuses,
)


videoanalyzer_operationresult = CliCommandType(
    operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._operationresults_operations#operationresultsOperations.{}',
    client_factory=cf_operationresult,
)


videoanalyzer_operationstatuses = CliCommandType(
    operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._operationstatuses_operations#operationstatusesOperations.{}',
    client_factory=cf_operationstatuses,
)


videoanalyzer_pipelinejob = CliCommandType(
    operations_tmpl=(
        'azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._pipelinejobs_operations#pipelinejobsOperations.{}'
    ),
    client_factory=cf_pipelinejob,
)


videoanalyzer_pipelinejoboperationstatuses = CliCommandType(
    operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._pipelinejoboperationstatuses_operations#pipelinejoboperationstatusesOperations.{}',
    client_factory=cf_pipelinejoboperationstatuses,
)


videoanalyzer_pipelinetopology = CliCommandType(
    operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._pipelinetopologies_operations#pipelinetopologiesOperations.{}',
    client_factory=cf_pipelinetopology,
)


videoanalyzer_privateendpointconnection = CliCommandType(
    operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._privateendpointconnections_operations#privateendpointconnectionsOperations.{}',
    client_factory=cf_privateendpointconnection,
)


videoanalyzer_privatelinkresource = CliCommandType(
    operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._privatelinkresources_operations#privatelinkresourcesOperations.{}',
    client_factory=cf_privatelinkresource,
)


videoanalyzer_video = CliCommandType(
    operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._videos_operations#videosOperations.{}',
    client_factory=cf_video,
)


videoanalyzer_videoanalyzeroperationresult = CliCommandType(
    operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._videoanalyzeroperationresults_operations#videoanalyzeroperationresultsOperations.{}',
    client_factory=cf_videoanalyzeroperationresult,
)


videoanalyzer_videoanalyzeroperationstatuses = CliCommandType(
    operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._videoanalyzeroperationstatuses_operations#videoanalyzeroperationstatusesOperations.{}',
    client_factory=cf_videoanalyzeroperationstatuses,
)


def load_command_table(self, _):

    with self.command_group(
        'videoanalyzer', videoanalyzer_videoanalyzer, client_factory=cf_videoanalyzer, is_experimental=True
    ) as g:
        g.custom_command('list', 'videoanalyzer_list')
        g.custom_show_command('show', 'videoanalyzer_show')
        g.custom_command('create', 'videoanalyzer_create', supports_no_wait=True)
        g.custom_command('update', 'videoanalyzer_update', supports_no_wait=True)
        g.custom_command('delete', 'videoanalyzer_delete', confirmation=True)
        g.custom_wait_command('wait', 'videoanalyzer_show')

    with self.command_group(
        'videoanalyzer accesspolicy', videoanalyzer_accesspolicy, client_factory=cf_accesspolicy
    ) as g:
        g.custom_command('list', 'videoanalyzer_accesspolicy_list')
        g.custom_show_command('show', 'videoanalyzer_accesspolicy_show')
        g.custom_command('create', 'videoanalyzer_accesspolicy_create')
        g.custom_command('update', 'videoanalyzer_accesspolicy_update')
        g.custom_command('delete', 'videoanalyzer_accesspolicy_delete', confirmation=True)

    with self.command_group('videoanalyzer edgemodule', videoanalyzer_edgemodule, client_factory=cf_edgemodule) as g:
        g.custom_command('list', 'videoanalyzer_edgemodule_list')
        g.custom_show_command('show', 'videoanalyzer_edgemodule_show')
        g.custom_command('create', 'videoanalyzer_edgemodule_create')
        g.custom_command('update', 'videoanalyzer_edgemodule_update')
        g.custom_command('delete', 'videoanalyzer_edgemodule_delete', confirmation=True)
        g.custom_command('list-provisioning-token', 'videoanalyzer_edgemodule_list_provisioning_token')

    with self.command_group(
        'videoanalyzer livepipeline', videoanalyzer_livepipeline, client_factory=cf_livepipeline
    ) as g:
        g.custom_command('list', 'videoanalyzer_livepipeline_list')
        g.custom_show_command('show', 'videoanalyzer_livepipeline_show')
        g.custom_command('create', 'videoanalyzer_livepipeline_create')
        g.custom_command('update', 'videoanalyzer_livepipeline_update')
        g.custom_command('delete', 'videoanalyzer_livepipeline_delete', confirmation=True)
        g.custom_command('activate', 'videoanalyzer_livepipeline_activate', supports_no_wait=True)
        g.custom_command('deactivate', 'videoanalyzer_livepipeline_deactivate', supports_no_wait=True)
        g.custom_wait_command('wait', 'videoanalyzer_livepipeline_show')

    with self.command_group(
        'videoanalyzer livepipelineoperationstatuses',
        videoanalyzer_livepipelineoperationstatuses,
        client_factory=cf_livepipelineoperationstatuses,
    ) as g:
        g.custom_show_command('show', 'videoanalyzer_livepipelineoperationstatuses_show')

    with self.command_group(
        'videoanalyzer operationresult', videoanalyzer_operationresult, client_factory=cf_operationresult
    ) as g:
        g.custom_show_command('show', 'videoanalyzer_operationresult_show')

    with self.command_group(
        'videoanalyzer operationstatuses', videoanalyzer_operationstatuses, client_factory=cf_operationstatuses
    ) as g:
        g.custom_show_command('show', 'videoanalyzer_operationstatuses_show')

    with self.command_group('videoanalyzer pipelinejob', videoanalyzer_pipelinejob, client_factory=cf_pipelinejob) as g:
        g.custom_command('list', 'videoanalyzer_pipelinejob_list')
        g.custom_show_command('show', 'videoanalyzer_pipelinejob_show')
        g.custom_command('create', 'videoanalyzer_pipelinejob_create')
        g.custom_command('update', 'videoanalyzer_pipelinejob_update')
        g.custom_command('delete', 'videoanalyzer_pipelinejob_delete', confirmation=True)
        g.custom_command('cancel', 'videoanalyzer_pipelinejob_cancel', supports_no_wait=True)
        g.custom_wait_command('wait', 'videoanalyzer_pipelinejob_show')

    with self.command_group(
        'videoanalyzer pipelinejoboperationstatuses',
        videoanalyzer_pipelinejoboperationstatuses,
        client_factory=cf_pipelinejoboperationstatuses,
    ) as g:
        g.custom_show_command('show', 'videoanalyzer_pipelinejoboperationstatuses_show')

    with self.command_group(
        'videoanalyzer pipelinetopology', videoanalyzer_pipelinetopology, client_factory=cf_pipelinetopology
    ) as g:
        g.custom_command('list', 'videoanalyzer_pipelinetopology_list')
        g.custom_show_command('show', 'videoanalyzer_pipelinetopology_show')
        g.custom_command('create', 'videoanalyzer_pipelinetopology_create')
        g.custom_command('update', 'videoanalyzer_pipelinetopology_update')
        g.custom_command('delete', 'videoanalyzer_pipelinetopology_delete', confirmation=True)

    with self.command_group(
        'videoanalyzer privateendpointconnection',
        videoanalyzer_privateendpointconnection,
        client_factory=cf_privateendpointconnection,
    ) as g:
        g.custom_command('list', 'videoanalyzer_privateendpointconnection_list')
        g.custom_show_command('show', 'videoanalyzer_privateendpointconnection_show')
        g.custom_command('create', 'videoanalyzer_privateendpointconnection_create')
        g.generic_update_command('update', custom_func_name='videoanalyzer_privateendpointconnection_update')
        g.custom_command('delete', 'videoanalyzer_privateendpointconnection_delete', confirmation=True)

    with self.command_group(
        'videoanalyzer privatelinkresource', videoanalyzer_privatelinkresource, client_factory=cf_privatelinkresource
    ) as g:
        g.custom_command('list', 'videoanalyzer_privatelinkresource_list')
        g.custom_show_command('show', 'videoanalyzer_privatelinkresource_show')

    with self.command_group('videoanalyzer video', videoanalyzer_video, client_factory=cf_video) as g:
        g.custom_command('list', 'videoanalyzer_video_list')
        g.custom_show_command('show', 'videoanalyzer_video_show')
        g.custom_command('create', 'videoanalyzer_video_create')
        g.custom_command('update', 'videoanalyzer_video_update')
        g.custom_command('delete', 'videoanalyzer_video_delete', confirmation=True)
        g.custom_command('list-content-token', 'videoanalyzer_video_list_content_token')

    with self.command_group(
        'videoanalyzer videoanalyzeroperationresult',
        videoanalyzer_videoanalyzeroperationresult,
        client_factory=cf_videoanalyzeroperationresult,
    ) as g:
        g.custom_show_command('show', 'videoanalyzer_videoanalyzeroperationresult_show')

    with self.command_group(
        'videoanalyzer videoanalyzeroperationstatuses',
        videoanalyzer_videoanalyzeroperationstatuses,
        client_factory=cf_videoanalyzeroperationstatuses,
    ) as g:
        g.custom_show_command('show', 'videoanalyzer_videoanalyzeroperationstatuses_show')
