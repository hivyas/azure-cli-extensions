# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from knack.help_files import helps


helps['videoanalyzer'] = '''
    type: group
    short-summary: Manage Video Analyzer
'''

helps['videoanalyzer edgemodule'] = """
    type: group
    short-summary: Manage edgemodule with videoanalyzer
"""

helps['videoanalyzer edgemodule list'] = """
    type: command
    short-summary: "List all existing edge module resources, along with their JSON representations."
    examples:
      - name: Lists the registered edge modules.
        text: |-
               az videoanalyzer edgemodule list --account-name "testaccount2" --resource-group "testrg"
"""

helps['videoanalyzer edgemodule show'] = """
    type: command
    short-summary: "Retrieves an existing edge module resource with the given name."
    examples:
      - name: Gets edge module registration.
        text: |-
               az videoanalyzer edgemodule show --account-name "testaccount2" --name "edgeModule1" --resource-group \
"testrg"
"""

helps['videoanalyzer edgemodule create'] = """
    type: command
    short-summary: "Creates a new edge module or updates an existing one. An edge module resource enables a single \
instance of an Azure Video Analyzer IoT edge module to interact with the Video Analyzer Account. This is used for \
authorization and also to make sure that the particular edge module instance only has access to the data it requires \
from the Azure Video Analyzer service. A new edge module resource should be created for every new instance of an Azure \
Video Analyzer edge module deployed to you Azure IoT edge environment. Edge module resources can be deleted if the \
specific module is not in use anymore."
    examples:
      - name: Registers an edge module.
        text: |-
               az videoanalyzer edgemodule create --account-name "testaccount2" --name "edgeModule1" --resource-group \
"testrg"
"""

helps['videoanalyzer edgemodule update'] = """
    type: command
    short-summary: "Update a new edge module or updates an existing one. An edge module resource enables a single \
instance of an Azure Video Analyzer IoT edge module to interact with the Video Analyzer Account. This is used for \
authorization and also to make sure that the particular edge module instance only has access to the data it requires \
from the Azure Video Analyzer service. A new edge module resource should be Updated for every new instance of an Azure \
Video Analyzer edge module deployed to you Azure IoT edge environment. Edge module resources can be deleted if the \
specific module is not in use anymore."
"""

helps['videoanalyzer edgemodule delete'] = """
    type: command
    short-summary: "Deletes an existing edge module resource. Deleting the edge module resource will prevent an Azure \
Video Analyzer IoT edge module which was previously initiated with the module provisioning token from communicating \
with the cloud."
    examples:
      - name: Deletes an edge module registration.
        text: |-
               az videoanalyzer edgemodule delete --account-name "testaccount2" --name "edgeModule1" --resource-group \
"testrg"
"""

helps['videoanalyzer edgemodule list-provisioning-token'] = """
    type: command
    short-summary: "Creates a new provisioning token. A provisioning token allows for a single instance of Azure Video \
analyzer IoT edge module to be initialized and authorized to the cloud account. The provisioning token itself is short \
lived and it is only used for the initial handshake between IoT edge module and the cloud. After the initial \
handshake, the IoT edge module will agree on a set of authentication keys which will be auto-rotated as long as the \
module is able to periodically connect to the cloud. A new provisioning token can be generated for the same IoT edge \
module in case the module state lost or reset."
    examples:
      - name: Generate the Provisioning token for an edge module registration.
        text: |-
               az videoanalyzer edgemodule list-provisioning-token --account-name "testaccount2" --name "edgeModule1" \
--expiration-date "2023-01-23T11:04:49.0526841-08:00" --resource-group "testrg"
"""

helps['videoanalyzer pipelinetopology'] = """
    type: group
    short-summary: Manage pipelinetopology with videoanalyzer
"""

helps['videoanalyzer pipelinetopology list'] = """
    type: command
    short-summary: "Retrieves a list of pipeline topologies that have been added to the account, if any, along with \
their JSON representation."
    examples:
      - name: List all pipeline topologies
        text: |-
               az videoanalyzer pipelinetopology list --top "2" --account-name "testaccount2" --resource-group \
"testrg"
"""

helps['videoanalyzer pipelinetopology show'] = """
    type: command
    short-summary: "Retrieves a specific pipeline topology by name. If a topology with that name has been previously \
created, the call will return the JSON representation of that topology."
    examples:
      - name: Get a pipeline topology by name
        text: |-
               az videoanalyzer pipelinetopology show --account-name "testaccount2" --name "pipelineTopology1" \
--resource-group "testrg"
"""

helps['videoanalyzer pipelinetopology create'] = """
    type: command
    short-summary: "Creates a new pipeline topology or updates an existing one, with the given name. A pipeline \
topology describes the processing steps to be applied when processing content for a particular outcome. The topology \
should be defined according to the scenario to be achieved and can be reused across many pipeline instances which \
share the same processing characteristics."
    parameters:
      - name: --parameters
        short-summary: "List of the topology parameter declarations. Parameters declared here can be referenced \
throughout the topology nodes through the use of \\"${PARAMETER_NAME}\\" string pattern. Parameters can have optional \
default values and can later be defined in individual instances of the pipeline."
        long-summary: |
            Usage: --parameters name=XX type=XX description=XX default=XX

            name: Required. Name of the parameter.
            type: Required. Type of the parameter.
            description: Description of the parameter.
            default: The default value for the parameter to be used if the pipeline does not specify a value.

            Multiple actions can be specified by using more than one --parameters argument.
      - name: --sources
        short-summary: "List of the topology source nodes. Source nodes enable external data to be ingested by the \
pipeline."
        long-summary: |
            Usage: --sources type=XX name=XX

            type: Required. The discriminator for derived types.
            name: Required. Node name. Must be unique within the topology.

            Multiple actions can be specified by using more than one --sources argument.
    examples:
      - name: Create or update a pipeline topology with an Rtsp source and video sink.
        text: |-
               az videoanalyzer pipelinetopology create --account-name "testaccount2" --kind "Live" --description \
"Pipeline Topology 1 Description" --parameters name="rtspUrlParameter" type="String" description="rtsp source url \
parameter" default="rtsp://microsoft.com/video.mp4" --parameters name="rtspPasswordParameter" type="SecretString" \
description="rtsp source password parameter" default="password" --sinks "[{\\"name\\":\\"videoSink\\",\\"@type\\":\\"#M\
icrosoft.VideoAnalyzer.VideoSink\\",\\"inputs\\":[{\\"nodeName\\":\\"rtspSource\\"}],\\"videoCreationProperties\\":{\\"\
description\\":\\"Parking lot south entrance\\",\\"segmentLength\\":\\"PT30S\\",\\"title\\":\\"Parking Lot (Camera 1)\\\
"},\\"videoName\\":\\"camera001\\",\\"videoPublishingOptions\\":{\\"disableArchive\\":\\"false\\",\\"disableRtspPublish\
ing\\":\\"true\\"}}]" --sources name="rtspSource" type="#Microsoft.VideoAnalyzer.RtspSource" \
endpoint={"@type":"#Microsoft.VideoAnalyzer.UnsecuredEndpoint","credentials":{"@type":"#Microsoft.VideoAnalyzer.Usernam\
ePasswordCredentials","password":"${rtspPasswordParameter}","username":"username"},"url":"${rtspUrlParameter}"} \
transport="Http" --name "Live_S1" --pipeline-topology-name "pipelineTopology1" --resource-group "testrg"
"""

helps['videoanalyzer pipelinetopology update'] = """
    type: command
    short-summary: "Updates an existing pipeline topology with the given name. If the associated live pipelines or \
pipeline jobs are in active or processing state, respectively, then only the description can be updated. Else, the \
properties that can be updated include: description, parameter declarations, sources, processors, and sinks."
    parameters:
      - name: --parameters
        short-summary: "List of the topology parameter declarations. Parameters declared here can be referenced \
throughout the topology nodes through the use of \\"${PARAMETER_NAME}\\" string pattern. Parameters can have optional \
default values and can later be defined in individual instances of the pipeline."
        long-summary: |
            Usage: --parameters name=XX type=XX description=XX default=XX

            name: Required. Name of the parameter.
            type: Required. Type of the parameter.
            description: Description of the parameter.
            default: The default value for the parameter to be used if the pipeline does not specify a value.

            Multiple actions can be specified by using more than one --parameters argument.
      - name: --sources
        short-summary: "List of the topology source nodes. Source nodes enable external data to be ingested by the \
pipeline."
        long-summary: |
            Usage: --sources type=XX name=XX

            type: Required. The discriminator for derived types.
            name: Required. Node name. Must be unique within the topology.

            Multiple actions can be specified by using more than one --sources argument.
    examples:
      - name: Update pipeline topology.
        text: |-
               az videoanalyzer pipelinetopology update --account-name "testaccount2" --description "Pipeline Topology \
1 Description" --pipeline-topology-name "pipelineTopology1" --resource-group "testrg"
"""

helps['videoanalyzer pipelinetopology delete'] = """
    type: command
    short-summary: "Deletes a pipeline topology with the given name. This method should be called after all instances \
of the topology have been stopped and deleted."
    examples:
      - name: Delete a pipeline topology
        text: |-
               az videoanalyzer pipelinetopology delete --account-name "testaccount2" --name "pipelineTopology1" \
--resource-group "testrg"
"""

helps['videoanalyzer livepipeline'] = """
    type: group
    short-summary: Manage livepipeline with videoanalyzer
"""

helps['videoanalyzer livepipeline list'] = """
    type: command
    short-summary: "Retrieves a list of live pipelines that have been created, along with their JSON representations."
    examples:
      - name: List live pipelines
        text: |-
               az videoanalyzer livepipeline list --top "2" --account-name "testaccount2" --resource-group "testrg"
"""

helps['videoanalyzer livepipeline show'] = """
    type: command
    short-summary: "Retrieves a specific live pipeline by name. If a live pipeline with that name has been previously \
created, the call will return the JSON representation of that instance."
    examples:
      - name: Retrieves a specific live pipeline by name
        text: |-
               az videoanalyzer livepipeline show --account-name "testaccount2" --name "livePipeline1" \
--resource-group "testrg"
"""

helps['videoanalyzer livepipeline create'] = """
    type: command
    short-summary: "Creates a new live pipeline or updates an existing one, with the given name."
    parameters:
      - name: --parameters
        short-summary: "List of the instance level parameter values for the user-defined topology parameters. A \
pipeline can only define or override parameters values for parameters which have been declared in the referenced \
topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be \
optionally be overridden."
        long-summary: |
            Usage: --parameters name=XX value=XX

            name: Required. Name of the parameter declared in the pipeline topology.
            value: Parameter value to be applied on this specific pipeline.

            Multiple actions can be specified by using more than one --parameters argument.
    examples:
      - name: Create or update a live pipeline
        text: |-
               az videoanalyzer livepipeline create --account-name "testaccount2" --name "livePipeline1" --description \
"Live Pipeline 1 Description" --bitrate-kbps 500 --parameters name="rtspUrlParameter" value="rtsp://contoso.com/stream"\
 --topology-name "pipelinetopology1" --resource-group "testrg"
"""

helps['videoanalyzer livepipeline update'] = """
    type: command
    short-summary: "Updates an existing live pipeline with the given name. Properties that can be updated include: \
description, bitrateKbps, and parameter definitions. Only the description can be updated while the live pipeline is \
active."
    parameters:
      - name: --parameters
        short-summary: "List of the instance level parameter values for the user-defined topology parameters. A \
pipeline can only define or override parameters values for parameters which have been declared in the referenced \
topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be \
optionally be overridden."
        long-summary: |
            Usage: --parameters name=XX value=XX

            name: Required. Name of the parameter declared in the pipeline topology.
            value: Parameter value to be applied on this specific pipeline.

            Multiple actions can be specified by using more than one --parameters argument.
    examples:
      - name: Updates a live pipeline.
        text: |-
               az videoanalyzer livepipeline update --account-name "testaccount2" --name "livePipeline1" --description \
"Live Pipeline 1 Description" --resource-group "testrg"
"""

helps['videoanalyzer livepipeline delete'] = """
    type: command
    short-summary: "Deletes a live pipeline with the given name."
    examples:
      - name: Delete a live pipeline
        text: |-
               az videoanalyzer livepipeline delete --account-name "testaccount2" --name "livePipeline1" \
--resource-group "testrg"
"""

helps['videoanalyzer livepipeline activate'] = """
    type: command
    short-summary: "Activates a live pipeline with the given name."
    examples:
      - name: Activate live pipeline
        text: |-
               az videoanalyzer livepipeline activate --account-name "testaccount2" --name "livePipeline1" \
--resource-group "testrg"
"""

helps['videoanalyzer livepipeline deactivate'] = """
    type: command
    short-summary: "Deactivates a live pipeline with the given name."
    examples:
      - name: Deactivate Live pipeline
        text: |-
               az videoanalyzer livepipeline deactivate --account-name "testaccount2" --name "livePipeline1" \
--resource-group "testrg"
"""

helps['videoanalyzer livepipeline wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the videoanalyzer livepipeline is met.
    examples:
      - name: Pause executing next line of CLI script until the videoanalyzer livepipeline is successfully created.
        text: |-
               az videoanalyzer livepipeline wait --account-name "testaccount2" --name "livePipeline1" \
--resource-group "testrg" --created
"""

helps['videoanalyzer pipelinejob'] = """
    type: group
    short-summary: Manage pipelinejob with videoanalyzer
"""

helps['videoanalyzer pipelinejob list'] = """
    type: command
    short-summary: "Retrieves a list of all live pipelines that have been created, along with their JSON \
representations."
    examples:
      - name: List all pipeline jobs
        text: |-
               az videoanalyzer pipelinejob list --top "2" --account-name "testaccount2" --resource-group "testrg"
"""

helps['videoanalyzer pipelinejob show'] = """
    type: command
    short-summary: "Retrieves a specific pipeline job by name. If a pipeline job with that name has been previously \
created, the call will return the JSON representation of that instance."
    examples:
      - name: Get a pipeline job by name
        text: |-
               az videoanalyzer pipelinejob show --account-name "testaccount2" --name "pipelineJob1" --resource-group \
"testrg"
"""

helps['videoanalyzer pipelinejob create'] = """
    type: command
    short-summary: "Creates a new pipeline job or updates an existing one, with the given name."
    parameters:
      - name: --parameters
        short-summary: "List of the instance level parameter values for the user-defined topology parameters. A \
pipeline can only define or override parameters values for parameters which have been declared in the referenced \
topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be \
optionally be overridden."
        long-summary: |
            Usage: --parameters name=XX value=XX

            name: Required. Name of the parameter declared in the pipeline topology.
            value: Parameter value to be applied on this specific pipeline.

            Multiple actions can be specified by using more than one --parameters argument.
    examples:
      - name: Create or update a pipeline job
        text: |-
               az videoanalyzer pipelinejob create --account-name "testaccount2" --description "Pipeline Job 1 \
Dsecription" --parameters name="timesequences" value="[[\\"2020-10-05T03:30:00Z\\", \\"2020-10-05T04:30:00Z\\"]]" \
--parameters name="videoSourceName" value="camera001" --topology-name "pipelinetopology1" --name "pipelineJob1" \
--resource-group "testrg"
"""

helps['videoanalyzer pipelinejob update'] = """
    type: command
    short-summary: "Updates an existing pipeline job with the given name. Properties that can be updated include: \
description."
    parameters:
      - name: --parameters
        short-summary: "List of the instance level parameter values for the user-defined topology parameters. A \
pipeline can only define or override parameters values for parameters which have been declared in the referenced \
topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be \
optionally be overridden."
        long-summary: |
            Usage: --parameters name=XX value=XX

            name: Required. Name of the parameter declared in the pipeline topology.
            value: Parameter value to be applied on this specific pipeline.

            Multiple actions can be specified by using more than one --parameters argument.
    examples:
      - name: Updates a pipeline job
        text: |-
               az videoanalyzer pipelinejob update --account-name "testaccount2" --description "Pipeline Job 1 \
description" --name "pipelineJob1" --resource-group "testrg"
"""

helps['videoanalyzer pipelinejob delete'] = """
    type: command
    short-summary: "Deletes a pipeline job with the given name."
    examples:
      - name: Deletes a pipeline job
        text: |-
               az videoanalyzer pipelinejob delete --account-name "testaccount2" --name "pipelineJob1" \
--resource-group "testrg"
"""

helps['videoanalyzer pipelinejob cancel'] = """
    type: command
    short-summary: "Cancels a pipeline job with the given name."
    examples:
      - name: Cancels a pipeline job
        text: |-
               az videoanalyzer pipelinejob cancel --account-name "testaccount2" --name "pipelineJob1" \
--resource-group "testrg"
"""

helps['videoanalyzer pipelinejob wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the videoanalyzer pipelinejob is met.
    examples:
      - name: Pause executing next line of CLI script until the videoanalyzer pipelinejob is successfully created.
        text: |-
               az videoanalyzer pipelinejob wait --account-name "testaccount2" --name "pipelineJob1" --resource-group \
"testrg" --created
"""

helps['videoanalyzer livepipelineoperationstatuses'] = """
    type: group
    short-summary: Manage livepipelineoperationstatuses with videoanalyzer
"""

helps['videoanalyzer livepipelineoperationstatuses show'] = """
    type: command
    short-summary: "Get the operation status of a live pipeline."
    examples:
      - name: Get the live pipeline operation status.
        text: |-
               az videoanalyzer livepipelineoperationstatuses show --operation-id "00000000-0000-0000-0000-000000000001\
" --account-name "testaccount2" --live-pipeline-name "livePipeline1" --resource-group "testrg"
"""

helps['videoanalyzer pipelinejoboperationstatuses'] = """
    type: group
    short-summary: Manage pipelinejoboperationstatuses with videoanalyzer
"""

helps['videoanalyzer pipelinejoboperationstatuses show'] = """
    type: command
    short-summary: "Get the operation status of a pipeline job with the given operationId."
    examples:
      - name: Get the pipeline job operation status.
        text: |-
               az videoanalyzer pipelinejoboperationstatuses show --operation-id "00000000-0000-0000-0000-000000000001"\
 --account-name "testaccount2" --pipeline-job-name "pipelineJob1" --resource-group "testrg"
"""

helps['videoanalyzer list'] = """
    type: command
    short-summary: "Lists the Video Analyzer accounts in the specified resource group. And List all Video Analyzer \
accounts in the specified subscription."
    examples:
      - name: List all Video Analyzer accounts
        text: |-
               az videoanalyzer list --resource-group "contoso"
      - name: List all Video Analyzer accounts in the specified subscription
        text: |-
               az videoanalyzer list
"""

helps['videoanalyzer show'] = """
    type: command
    short-summary: "Get the details of the specified Video Analyzer account."
    examples:
      - name: Get a Video Analyzer account by name
        text: |-
               az videoanalyzer show --account-name "contosotv" --resource-group "contoso"
"""

helps['videoanalyzer create'] = """
    type: command
    short-summary: "Create an instance of a Video Analyzer account."
    parameters:
      - name: --storage-accounts
        short-summary: "The storage accounts for this resource."
        long-summary: |
            Usage: --storage-accounts id=XX user-assigned-identity=XX

            id: Required. The ID of the storage account resource. Video Analyzer relies on tables, queues, and blobs. \
The primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage).
            user-assigned-identity: The user assigned managed identity's resource identifier to use when accessing a \
resource.

            Multiple actions can be specified by using more than one --storage-accounts argument.
      - name: --iot-hubs
        short-summary: "The IoT Hubs for this resource."
        long-summary: |
            Usage: --iot-hubs id=XX user-assigned-identity=XX

            id: Required. The IoT Hub resource identifier.
            user-assigned-identity: Required. The user assigned managed identity's resource identifier to use when \
accessing a resource.

            Multiple actions can be specified by using more than one --iot-hubs argument.
    examples:
      - name: Create a Video Analyzer account
        text: |-
               az videoanalyzer create --account-name "contosotv" --video-analyzer-identity-type "UserAssigned" \
--user-assigned-identities "{\\"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microso\
ft.ManagedIdentity/userAssignedIdentities/id1\\":{},\\"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGrou\
ps/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2\\":{},\\"/subscriptions/00000000-0000-0000-0000-00\
0000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id3\\":{}}" --location "South \
Central US" --type "SystemKey" --iot-hubs id="/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/pro\
viders/Microsoft.Devices/IotHubs/hub1" user-assigned-identity="/subscriptions/00000000-0000-0000-0000-000000000000/reso\
urceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id3" --iot-hubs \
id="/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Devices/IotHubs/hub2" \
user-assigned-identity="/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Manag\
edIdentity/userAssignedIdentities/id3" --storage-accounts id="/subscriptions/00000000-0000-0000-0000-000000000000/resou\
rceGroups/rg/providers/Microsoft.Storage/storageAccounts/storage1" user-assigned-identity="/subscriptions/00000000-0000\
-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2" --tags \
tag1="value1" tag2="value2" --resource-group "contoso"
"""

helps['videoanalyzer update'] = """
    type: command
    short-summary: "Updates an existing instance of Video Analyzer account."
    parameters:
      - name: --storage-accounts
        short-summary: "The storage accounts for this resource."
        long-summary: |
            Usage: --storage-accounts id=XX user-assigned-identity=XX

            id: Required. The ID of the storage account resource. Video Analyzer relies on tables, queues, and blobs. \
The primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage).
            user-assigned-identity: The user assigned managed identity's resource identifier to use when accessing a \
resource.

            Multiple actions can be specified by using more than one --storage-accounts argument.
      - name: --iot-hubs
        short-summary: "The IoT Hubs for this resource."
        long-summary: |
            Usage: --iot-hubs id=XX user-assigned-identity=XX

            id: Required. The IoT Hub resource identifier.
            user-assigned-identity: Required. The user assigned managed identity's resource identifier to use when \
accessing a resource.

            Multiple actions can be specified by using more than one --iot-hubs argument.
    examples:
      - name: Update a Video Analyzer accounts
        text: |-
               az videoanalyzer update --account-name "contosotv" --tags key1="value3" --resource-group "contoso"
"""

helps['videoanalyzer delete'] = """
    type: command
    short-summary: "Delete the specified Video Analyzer account."
    examples:
      - name: Delete a Video Analyzer account
        text: |-
               az videoanalyzer delete --account-name "contosotv" --resource-group "contoso"
"""

helps['videoanalyzer wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the videoanalyzer is met.
    examples:
      - name: Pause executing next line of CLI script until the videoanalyzer is successfully created.
        text: |-
               az videoanalyzer wait --account-name "contosotv" --resource-group "contoso" --created
      - name: Pause executing next line of CLI script until the videoanalyzer is successfully updated.
        text: |-
               az videoanalyzer wait --account-name "contosotv" --resource-group "contoso" --updated
"""

helps['videoanalyzer privatelinkresource'] = """
    type: group
    short-summary: Manage privatelinkresource with videoanalyzer
"""

helps['videoanalyzer privatelinkresource list'] = """
    type: command
    short-summary: "Get list of group IDs for video analyzer account."
    examples:
      - name: Get list of all group IDs.
        text: |-
               az videoanalyzer privatelinkresource list --account-name "contososports" --resource-group "contoso"
"""

helps['videoanalyzer privatelinkresource show'] = """
    type: command
    short-summary: "Get group ID for video analyzer account."
    examples:
      - name: Get details of a group ID.
        text: |-
               az videoanalyzer privatelinkresource show --name "integration" --account-name "contososports" \
--resource-group "contoso"
"""

helps['videoanalyzer privateendpointconnection'] = """
    type: group
    short-summary: Manage privateendpointconnection with videoanalyzer
"""

helps['videoanalyzer privateendpointconnection list'] = """
    type: command
    short-summary: "Get all private endpoint connections under video analyzer account."
    examples:
      - name: Get all private endpoint connections.
        text: |-
               az videoanalyzer privateendpointconnection list --account-name "contososports" --resource-group \
"contoso"
"""

helps['videoanalyzer privateendpointconnection show'] = """
    type: command
    short-summary: "Get private endpoint connection under video analyzer account."
    examples:
      - name: Get private endpoint connection.
        text: |-
               az videoanalyzer privateendpointconnection show --name "10000000-0000-0000-0000-000000000000" \
--account-name "contososports" --resource-group "contoso"
"""

helps['videoanalyzer privateendpointconnection create'] = """
    type: command
    short-summary: "Update private endpoint connection state under video analyzer account."
    parameters:
      - name: --private-link-service-connection-state
        short-summary: "A collection of information about the state of the connection between service consumer and \
provider."
        long-summary: |
            Usage: --private-link-service-connection-state status=XX description=XX actions-required=XX

            status: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
            description: The reason for approval/rejection of the connection.
            actions-required: A message indicating if changes on the service provider require any updates on the \
consumer.
    examples:
      - name: Update private endpoint connection.
        text: |-
               az videoanalyzer privateendpointconnection create --name "10000000-0000-0000-0000-000000000000" \
--account-name "contososports" --private-link-service-connection-state description="Test description." \
status="Approved" --resource-group "contoso"
"""

helps['videoanalyzer privateendpointconnection update'] = """
    type: command
    short-summary: "Update private endpoint connection state under video analyzer account."
    parameters:
      - name: --private-link-service-connection-state
        short-summary: "A collection of information about the state of the connection between service consumer and \
provider."
        long-summary: |
            Usage: --private-link-service-connection-state status=XX description=XX actions-required=XX

            status: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
            description: The reason for approval/rejection of the connection.
            actions-required: A message indicating if changes on the service provider require any updates on the \
consumer.
"""

helps['videoanalyzer privateendpointconnection delete'] = """
    type: command
    short-summary: "Delete private endpoint connection under video analyzer account."
    examples:
      - name: Delete private endpoint connection.
        text: |-
               az videoanalyzer privateendpointconnection delete --name "connectionName1" --account-name \
"contososports" --resource-group "contoso"
"""

helps['videoanalyzer operationstatuses'] = """
    type: group
    short-summary: Manage operationstatuses with videoanalyzer
"""

helps['videoanalyzer operationstatuses show'] = """
    type: command
    short-summary: "Get private endpoint connection operation status."
    examples:
      - name: Get status of private endpoint asynchronous operation when it is completed.
        text: |-
               az videoanalyzer operationstatuses show --name "D612C429-2526-49D5-961B-885AE11406FD" --operation-id \
"CDE44A33-DD32-4FFA-A1BC-601DC4D52B03" --account-name "contososports" --resource-group "contoso"
"""

helps['videoanalyzer operationresult'] = """
    type: group
    short-summary: Manage operationresult with videoanalyzer
"""

helps['videoanalyzer operationresult show'] = """
    type: command
    short-summary: "Get private endpoint connection operation result."
    examples:
      - name: Get status of private endpoint connection asynchronous operation.
        text: |-
               az videoanalyzer operationresult show --name "6FBA62C4-99B5-4FF8-9826-FC4744A8864F" --operation-id \
"10000000-0000-0000-0000-000000000000" --account-name "contososports" --resource-group "contoso"
"""

helps['videoanalyzer videoanalyzeroperationstatuses'] = """
    type: group
    short-summary: Manage videoanalyzeroperationstatuses with videoanalyzer
"""

helps['videoanalyzer videoanalyzeroperationstatuses show'] = """
    type: command
    short-summary: "Get video analyzer operation status."
    examples:
      - name: Get status of asynchronous operation when it is completed with error.
        text: |-
               az videoanalyzer videoanalyzeroperationstatuses show --operation-id "D612C429-2526-49D5-961B-885AE11406F\
D" --location-name "westus"
      - name: Get status of asynchronous operation when it is completed.
        text: |-
               az videoanalyzer videoanalyzeroperationstatuses show --operation-id "D612C429-2526-49D5-961B-885AE11406F\
D" --location-name "westus"
      - name: Get status of asynchronous operation when it is ongoing.
        text: |-
               az videoanalyzer videoanalyzeroperationstatuses show --operation-id "D612C429-2526-49D5-961B-885AE11406F\
D" --location-name "westus"
"""

helps['videoanalyzer videoanalyzeroperationresult'] = """
    type: group
    short-summary: Manage videoanalyzeroperationresult with videoanalyzer
"""

helps['videoanalyzer videoanalyzeroperationresult show'] = """
    type: command
    short-summary: "Get video analyzer operation result."
    examples:
      - name: Get status of asynchronous operation.
        text: |-
               az videoanalyzer videoanalyzeroperationresult show --operation-id "6FBA62C4-99B5-4FF8-9826-FC4744A8864F"\
 --location-name "westus"
"""

helps['videoanalyzer video'] = """
    type: group
    short-summary: Manage video with videoanalyzer
"""

helps['videoanalyzer video list'] = """
    type: command
    short-summary: "Retrieves a list of video resources that have been created, along with their JSON \
representations."
    examples:
      - name: Lists video entities.
        text: |-
               az videoanalyzer video list --top "2" --account-name "testaccount2" --resource-group "testrg"
"""

helps['videoanalyzer video show'] = """
    type: command
    short-summary: "Retrieves an existing video resource with the given name."
    examples:
      - name: Gets a video entity.
        text: |-
               az videoanalyzer video show --account-name "testaccount2" --resource-group "testrg" --name "video1"
"""

helps['videoanalyzer video create'] = """
    type: command
    short-summary: "Creates a new video resource or updates an existing video resource with the given name."
    examples:
      - name: Register video entity.
        text: |-
               az videoanalyzer video create --account-name "testaccount2" --description "Sample Description 1" \
--title "Sample Title 1" --resource-group "testrg" --name "video1"
"""

helps['videoanalyzer video update'] = """
    type: command
    short-summary: "Updates individual properties of an existing video resource with the given name."
    examples:
      - name: Update video entity.
        text: |-
               az videoanalyzer video update --account-name "testaccount2" --description "Parking Lot East Entrance" \
--resource-group "testrg" --name "video1"
"""

helps['videoanalyzer video delete'] = """
    type: command
    short-summary: "Deletes an existing video resource and its underlying data. This operation is irreversible."
    examples:
      - name: Deletes a video entity.
        text: |-
               az videoanalyzer video delete --account-name "testaccount2" --resource-group "testrg" --name "video1"
"""

helps['videoanalyzer video list-content-token'] = """
    type: command
    short-summary: "Generates a streaming token which can be used for accessing content from video content URLs, for a \
video resource with the given name."
    examples:
      - name: Generate a content token for media endpoint authorization.
        text: |-
               az videoanalyzer video list-content-token --account-name "testaccount2" --resource-group "testrg" \
--name "video3"
"""

helps['videoanalyzer accesspolicy'] = """
    type: group
    short-summary: Manage accesspolicy with videoanalyzer
"""

helps['videoanalyzer accesspolicy list'] = """
    type: command
    short-summary: "Retrieves all existing access policy resources, along with their JSON representations."
    examples:
      - name: Lists access policy entities.
        text: |-
               az videoanalyzer accesspolicy list --top "2" --account-name "testaccount2" --resource-group "testrg"
"""

helps['videoanalyzer accesspolicy show'] = """
    type: command
    short-summary: "Retrieves an existing access policy resource with the given name."
    examples:
      - name: Gets an access policy entity.
        text: |-
               az videoanalyzer accesspolicy show --name "accessPolicyName1" --account-name "testaccount2" \
--resource-group "testrg"
"""

helps['videoanalyzer accesspolicy create'] = """
    type: command
    short-summary: "Creates a new access policy resource or updates an existing one with the given name."
    parameters:
      - name: --jwtauthentication
        short-summary: "Properties for access validation based on JSON Web Tokens (JWT)."
        long-summary: |
            Usage: --jwtauthentication issuers=XX audiences=XX claims=XX keys=XX type=XX

            issuers: List of expected token issuers. Token issuer is valid if it matches at least one of the given \
values.
            audiences: List of expected token audiences. Token audience is valid if it matches at least one of the \
given values.
            claims: List of additional token claims to be validated. Token must contains all claims and respective \
values for it to be valid.
            keys: List of keys which can be used to validate access tokens. Having multiple keys allow for seamless \
key rotation of the token signing key. Token signature must match exactly one key.
            type: Required. The discriminator for derived types.
    examples:
      - name: Register access policy entity.
        text: |-
               az videoanalyzer accesspolicy create --name "accessPolicyName1" --account-name "testaccount2" \
--jwtauthentication audiences="audience1" claims={"name":"claimname1","value":"claimvalue1"} \
claims={"name":"claimname2","value":"claimvalue2"} issuers="issuer1" issuers="issuer2" keys={"@type":"#Microsoft.VideoA\
nalyzer.RsaTokenKey","alg":"RS256","e":"ZLFzZTY0IQ==","kid":"123","n":"YmFzZTY0IQ=="} keys={"@type":"#Microsoft.VideoAn\
alyzer.EccTokenKey","alg":"ES256","kid":"124","x":"XX==","y":"YY=="} --resource-group "testrg"
"""

helps['videoanalyzer accesspolicy update'] = """
    type: command
    short-summary: "Updates individual properties of an existing access policy resource with the given name."
    parameters:
      - name: --jwtauthentication
        short-summary: "Properties for access validation based on JSON Web Tokens (JWT)."
        long-summary: |
            Usage: --jwtauthentication issuers=XX audiences=XX claims=XX keys=XX type=XX

            issuers: List of expected token issuers. Token issuer is valid if it matches at least one of the given \
values.
            audiences: List of expected token audiences. Token audience is valid if it matches at least one of the \
given values.
            claims: List of additional token claims to be validated. Token must contains all claims and respective \
values for it to be valid.
            keys: List of keys which can be used to validate access tokens. Having multiple keys allow for seamless \
key rotation of the token signing key. Token signature must match exactly one key.
            type: Required. The discriminator for derived types.
    examples:
      - name: Update access policy entity.
        text: |-
               az videoanalyzer accesspolicy update --name "accessPolicyName1" --account-name "testaccount2" \
--jwtauthentication audiences="audience1" claims={"name":"claimname1","value":"claimvalue1"} \
claims={"name":"claimname2","value":"claimvalue2"} issuers="issuer1" issuers="issuer2" keys={"@type":"#Microsoft.VideoA\
nalyzer.RsaTokenKey","alg":"RS256","e":"ZLFzZTY0IQ==","kid":"123","n":"YmFzZTY0IQ=="} keys={"@type":"#Microsoft.VideoAn\
alyzer.EccTokenKey","alg":"ES256","kid":"124","x":"XX==","y":"YY=="} --resource-group "testrg"
"""

helps['videoanalyzer accesspolicy delete'] = """
    type: command
    short-summary: "Deletes an existing access policy resource with the given name."
    examples:
      - name: Deletes an access policy entity.
        text: |-
               az videoanalyzer accesspolicy delete --name "accessPolicyName1" --account-name "testaccount2" \
--resource-group "testrg"
"""
