# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from knack.util import CLIError
from azure.cli.core.util import sdk_no_wait


def videoanalyzer_edgemodule_list(client,
                                  resource_group_name,
                                  account_name,
                                  top=None):
    return client.list(resource_group_name=resource_group_name,
                       account_name=account_name,
                       top=top)


def videoanalyzer_edgemodule_show(client,
                                  resource_group_name,
                                  account_name,
                                  edge_module_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      edge_module_name=edge_module_name)


def videoanalyzer_edgemodule_create(client,
                                    resource_group_name,
                                    account_name,
                                    edge_module_name):
    parameters = {}
    return client.create_or_update(resource_group_name=resource_group_name,
                                   account_name=account_name,
                                   edge_module_name=edge_module_name,
                                   parameters=parameters)


def videoanalyzer_edgemodule_update(client,
                                    resource_group_name,
                                    account_name,
                                    edge_module_name):
    parameters = {}
    return client.create_or_update(resource_group_name=resource_group_name,
                                   account_name=account_name,
                                   edge_module_name=edge_module_name,
                                   parameters=parameters)


def videoanalyzer_edgemodule_delete(client,
                                    resource_group_name,
                                    account_name,
                                    edge_module_name):
    return client.delete(resource_group_name=resource_group_name,
                         account_name=account_name,
                         edge_module_name=edge_module_name)


def videoanalyzer_edgemodule_list_provisioning_token(client,
                                                     resource_group_name,
                                                     account_name,
                                                     edge_module_name,
                                                     expiration_date):
    parameters = {}
    parameters['expiration_date'] = expiration_date
    return client.list_provisioning_token(resource_group_name=resource_group_name,
                                          account_name=account_name,
                                          edge_module_name=edge_module_name,
                                          parameters=parameters)


def videoanalyzer_pipelinetopology_list(client,
                                        resource_group_name,
                                        account_name,
                                        filter_=None,
                                        top=None):
    return client.list(resource_group_name=resource_group_name,
                       account_name=account_name,
                       filter=filter_,
                       top=top)


def videoanalyzer_pipelinetopology_show(client,
                                        resource_group_name,
                                        account_name,
                                        pipeline_topology_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      pipeline_topology_name=pipeline_topology_name)


def videoanalyzer_pipelinetopology_create(client,
                                          resource_group_name,
                                          account_name,
                                          pipeline_topology_name,
                                          kind,
                                          name,
                                          description=None,
                                          parameters_=None,
                                          sources=None,
                                          processors=None,
                                          sinks=None):
    parameters = {}
    return client.create_or_update(resource_group_name=resource_group_name,
                                   account_name=account_name,
                                   pipeline_topology_name=pipeline_topology_name,
                                   parameters=parameters)


def videoanalyzer_pipelinetopology_update(client,
                                          resource_group_name,
                                          account_name,
                                          pipeline_topology_name,
                                          kind=None,
                                          description=None,
                                          parameters_=None,
                                          sources=None,
                                          processors=None,
                                          sinks=None,
                                          name=None):
    parameters = {}
    if kind is not None:
        parameters['kind'] = kind
    if description is not None:
        parameters['description'] = description
    if parameters_ is not None:
        parameters['parameters'] = parameters_
    if sources is not None:
        parameters['sources'] = sources
    if processors is not None:
        parameters['processors'] = processors
    if sinks is not None:
        parameters['sinks'] = sinks
    parameters['sku'] = {}
    if name is not None:
        parameters['sku']['name'] = name
    if len(parameters['sku']) == 0:
        del parameters['sku']
    return client.update(resource_group_name=resource_group_name,
                         account_name=account_name,
                         pipeline_topology_name=pipeline_topology_name,
                         parameters=parameters)


def videoanalyzer_pipelinetopology_delete(client,
                                          resource_group_name,
                                          account_name,
                                          pipeline_topology_name):
    return client.delete(resource_group_name=resource_group_name,
                         account_name=account_name,
                         pipeline_topology_name=pipeline_topology_name)


def videoanalyzer_livepipeline_list(client,
                                    resource_group_name,
                                    account_name,
                                    filter_=None,
                                    top=None):
    return client.list(resource_group_name=resource_group_name,
                       account_name=account_name,
                       filter=filter_,
                       top=top)


def videoanalyzer_livepipeline_show(client,
                                    resource_group_name,
                                    account_name,
                                    live_pipeline_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      live_pipeline_name=live_pipeline_name)


def videoanalyzer_livepipeline_create(client,
                                      resource_group_name,
                                      account_name,
                                      live_pipeline_name,
                                      topology_name=None,
                                      description=None,
                                      bitrate_kbps=None,
                                      parameters_=None):
    parameters = {}
    return client.create_or_update(resource_group_name=resource_group_name,
                                   account_name=account_name,
                                   live_pipeline_name=live_pipeline_name,
                                   parameters=parameters)


def videoanalyzer_livepipeline_update(client,
                                      resource_group_name,
                                      account_name,
                                      live_pipeline_name,
                                      topology_name=None,
                                      description=None,
                                      bitrate_kbps=None,
                                      parameters_=None):
    parameters = {}
    if topology_name is not None:
        parameters['topology_name'] = topology_name
    if description is not None:
        parameters['description'] = description
    if bitrate_kbps is not None:
        parameters['bitrate_kbps'] = bitrate_kbps
    if parameters_ is not None:
        parameters['parameters'] = parameters_
    return client.update(resource_group_name=resource_group_name,
                         account_name=account_name,
                         live_pipeline_name=live_pipeline_name,
                         parameters=parameters)


def videoanalyzer_livepipeline_delete(client,
                                      resource_group_name,
                                      account_name,
                                      live_pipeline_name):
    return client.delete(resource_group_name=resource_group_name,
                         account_name=account_name,
                         live_pipeline_name=live_pipeline_name)


def videoanalyzer_livepipeline_activate(client,
                                        resource_group_name,
                                        account_name,
                                        live_pipeline_name,
                                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_activate,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       live_pipeline_name=live_pipeline_name)


def videoanalyzer_livepipeline_deactivate(client,
                                          resource_group_name,
                                          account_name,
                                          live_pipeline_name,
                                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_deactivate,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       live_pipeline_name=live_pipeline_name)


def videoanalyzer_pipelinejob_list(client,
                                   resource_group_name,
                                   account_name,
                                   filter_=None,
                                   top=None):
    return client.list(resource_group_name=resource_group_name,
                       account_name=account_name,
                       filter=filter_,
                       top=top)


def videoanalyzer_pipelinejob_show(client,
                                   resource_group_name,
                                   account_name,
                                   pipeline_job_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      pipeline_job_name=pipeline_job_name)


def videoanalyzer_pipelinejob_create(client,
                                     resource_group_name,
                                     account_name,
                                     pipeline_job_name,
                                     topology_name=None,
                                     description=None,
                                     parameters_=None):
    parameters = {}
    return client.create_or_update(resource_group_name=resource_group_name,
                                   account_name=account_name,
                                   pipeline_job_name=pipeline_job_name,
                                   parameters=parameters)


def videoanalyzer_pipelinejob_update(client,
                                     resource_group_name,
                                     account_name,
                                     pipeline_job_name,
                                     topology_name=None,
                                     description=None,
                                     parameters_=None):
    parameters = {}
    if topology_name is not None:
        parameters['topology_name'] = topology_name
    if description is not None:
        parameters['description'] = description
    if parameters_ is not None:
        parameters['parameters'] = parameters_
    return client.update(resource_group_name=resource_group_name,
                         account_name=account_name,
                         pipeline_job_name=pipeline_job_name,
                         parameters=parameters)


def videoanalyzer_pipelinejob_delete(client,
                                     resource_group_name,
                                     account_name,
                                     pipeline_job_name):
    return client.delete(resource_group_name=resource_group_name,
                         account_name=account_name,
                         pipeline_job_name=pipeline_job_name)


def videoanalyzer_pipelinejob_cancel(client,
                                     resource_group_name,
                                     account_name,
                                     pipeline_job_name,
                                     no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_cancel,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       pipeline_job_name=pipeline_job_name)


def videoanalyzer_livepipelineoperationstatuses_show(client,
                                                     resource_group_name,
                                                     account_name,
                                                     live_pipeline_name,
                                                     operation_id):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      live_pipeline_name=live_pipeline_name,
                      operation_id=operation_id)


def videoanalyzer_pipelinejoboperationstatuses_show(client,
                                                    resource_group_name,
                                                    account_name,
                                                    pipeline_job_name,
                                                    operation_id):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      pipeline_job_name=pipeline_job_name,
                      operation_id=operation_id)


def videoanalyzer_list(client,
                       resource_group_name=None):
    if resource_group_name:
        return client.list(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def videoanalyzer_show(client,
                       resource_group_name,
                       account_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name)


def videoanalyzer_create(client,
                         resource_group_name,
                         account_name,
                         location,
                         tags=None,
                         storage_accounts=None,
                         iot_hubs=None,
                         public_network_access=None,
                         public_network_access_public_network_access=None,
                         public_network_access1=None,
                         public_network_access2=None,
                         type_=None,
                         user_assigned_identity=None,
                         key_identifier=None,
                         video_analyzer_identity_type=None,
                         user_assigned_identities=None,
                         no_wait=False):
    parameters = {}
    if tags is not None:
        parameters['tags'] = tags
    parameters['location'] = location
    if storage_accounts is not None:
        parameters['storage_accounts'] = storage_accounts
    if iot_hubs is not None:
        parameters['iot_hubs'] = iot_hubs
    if public_network_access is not None:
        parameters['public_network_access'] = public_network_access
    parameters['network_access_control'] = {}
    parameters['network_access_control']['consumption'] = {}
    if public_network_access_public_network_access is not None:
        parameters['network_access_control']['consumption']['public_network_access'] = public_network_access_public_network_access
    if len(parameters['network_access_control']['consumption']) == 0:
        del parameters['network_access_control']['consumption']
    parameters['network_access_control']['ingestion'] = {}
    if public_network_access1 is not None:
        parameters['network_access_control']['ingestion']['public_network_access'] = public_network_access1
    if len(parameters['network_access_control']['ingestion']) == 0:
        del parameters['network_access_control']['ingestion']
    parameters['network_access_control']['integration'] = {}
    if public_network_access2 is not None:
        parameters['network_access_control']['integration']['public_network_access'] = public_network_access2
    if len(parameters['network_access_control']['integration']) == 0:
        del parameters['network_access_control']['integration']
    if len(parameters['network_access_control']) == 0:
        del parameters['network_access_control']
    parameters['encryption'] = {}
    if type_ is not None:
        parameters['encryption']['type'] = type_
    parameters['encryption']['identity'] = {}
    if user_assigned_identity is not None:
        parameters['encryption']['identity']['user_assigned_identity'] = user_assigned_identity
    if len(parameters['encryption']['identity']) == 0:
        del parameters['encryption']['identity']
    parameters['encryption']['key_vault_properties'] = {}
    if key_identifier is not None:
        parameters['encryption']['key_vault_properties']['key_identifier'] = key_identifier
    if len(parameters['encryption']['key_vault_properties']) == 0:
        del parameters['encryption']['key_vault_properties']
    if len(parameters['encryption']) == 0:
        del parameters['encryption']
    parameters['identity'] = {}
    if video_analyzer_identity_type is not None:
        parameters['identity']['type'] = video_analyzer_identity_type
    if user_assigned_identities is not None:
        parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(parameters['identity']) == 0:
        del parameters['identity']
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       parameters=parameters)


def videoanalyzer_update(client,
                         resource_group_name,
                         account_name,
                         tags=None,
                         storage_accounts=None,
                         iot_hubs=None,
                         public_network_access=None,
                         public_network_access_public_network_access=None,
                         public_network_access1=None,
                         public_network_access2=None,
                         type_=None,
                         user_assigned_identity=None,
                         key_identifier=None,
                         video_analyzer_identity_type=None,
                         user_assigned_identities=None,
                         no_wait=False):
    parameters = {}
    if tags is not None:
        parameters['tags'] = tags
    if storage_accounts is not None:
        parameters['storage_accounts'] = storage_accounts
    if iot_hubs is not None:
        parameters['iot_hubs'] = iot_hubs
    if public_network_access is not None:
        parameters['public_network_access'] = public_network_access
    parameters['network_access_control'] = {}
    parameters['network_access_control']['consumption'] = {}
    if public_network_access_public_network_access is not None:
        parameters['network_access_control']['consumption']['public_network_access'] = public_network_access_public_network_access
    if len(parameters['network_access_control']['consumption']) == 0:
        del parameters['network_access_control']['consumption']
    parameters['network_access_control']['ingestion'] = {}
    if public_network_access1 is not None:
        parameters['network_access_control']['ingestion']['public_network_access'] = public_network_access1
    if len(parameters['network_access_control']['ingestion']) == 0:
        del parameters['network_access_control']['ingestion']
    parameters['network_access_control']['integration'] = {}
    if public_network_access2 is not None:
        parameters['network_access_control']['integration']['public_network_access'] = public_network_access2
    if len(parameters['network_access_control']['integration']) == 0:
        del parameters['network_access_control']['integration']
    if len(parameters['network_access_control']) == 0:
        del parameters['network_access_control']
    parameters['encryption'] = {}
    if type_ is not None:
        parameters['encryption']['type'] = type_
    parameters['encryption']['identity'] = {}
    if user_assigned_identity is not None:
        parameters['encryption']['identity']['user_assigned_identity'] = user_assigned_identity
    if len(parameters['encryption']['identity']) == 0:
        del parameters['encryption']['identity']
    parameters['encryption']['key_vault_properties'] = {}
    if key_identifier is not None:
        parameters['encryption']['key_vault_properties']['key_identifier'] = key_identifier
    if len(parameters['encryption']['key_vault_properties']) == 0:
        del parameters['encryption']['key_vault_properties']
    if len(parameters['encryption']) == 0:
        del parameters['encryption']
    parameters['identity'] = {}
    if video_analyzer_identity_type is not None:
        parameters['identity']['type'] = video_analyzer_identity_type
    if user_assigned_identities is not None:
        parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(parameters['identity']) == 0:
        del parameters['identity']
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       parameters=parameters)


def videoanalyzer_delete(client,
                         resource_group_name,
                         account_name):
    return client.delete(resource_group_name=resource_group_name,
                         account_name=account_name)


def videoanalyzer_privatelinkresource_list(client,
                                           resource_group_name,
                                           account_name):
    return client.list(resource_group_name=resource_group_name,
                       account_name=account_name)


def videoanalyzer_privatelinkresource_show(client,
                                           resource_group_name,
                                           account_name,
                                           name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      name=name)


def videoanalyzer_privateendpointconnection_list(client,
                                                 resource_group_name,
                                                 account_name):
    return client.list(resource_group_name=resource_group_name,
                       account_name=account_name)


def videoanalyzer_privateendpointconnection_show(client,
                                                 resource_group_name,
                                                 account_name,
                                                 name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      name=name)


def videoanalyzer_privateendpointconnection_create(client,
                                                   resource_group_name,
                                                   account_name,
                                                   name,
                                                   private_link_service_connection_state=None):
    parameters = {}
    if private_link_service_connection_state is not None:
        parameters['private_link_service_connection_state'] = private_link_service_connection_state
    return client.create_or_update(resource_group_name=resource_group_name,
                                   account_name=account_name,
                                   name=name,
                                   parameters=parameters)


def videoanalyzer_privateendpointconnection_update(instance,
                                                   resource_group_name,
                                                   account_name,
                                                   name,
                                                   private_link_service_connection_state=None):
    if private_link_service_connection_state is not None:
        instance.private_link_service_connection_state = private_link_service_connection_state
    return instance


def videoanalyzer_privateendpointconnection_delete(client,
                                                   resource_group_name,
                                                   account_name,
                                                   name):
    return client.delete(resource_group_name=resource_group_name,
                         account_name=account_name,
                         name=name)


def videoanalyzer_operationstatuses_show(client,
                                         resource_group_name,
                                         account_name,
                                         name,
                                         operation_id):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      name=name,
                      operation_id=operation_id)


def videoanalyzer_operationresult_show(client,
                                       resource_group_name,
                                       account_name,
                                       name,
                                       operation_id):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      name=name,
                      operation_id=operation_id)


def videoanalyzer_videoanalyzeroperationstatuses_show(client,
                                                      location_name,
                                                      operation_id):
    return client.get(location_name=location_name,
                      operation_id=operation_id)


def videoanalyzer_videoanalyzeroperationresult_show(client,
                                                    location_name,
                                                    operation_id):
    return client.get(location_name=location_name,
                      operation_id=operation_id)


def videoanalyzer_video_list(client,
                             resource_group_name,
                             account_name,
                             top=None):
    return client.list(resource_group_name=resource_group_name,
                       account_name=account_name,
                       top=top)


def videoanalyzer_video_show(client,
                             resource_group_name,
                             account_name,
                             video_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      video_name=video_name)


def videoanalyzer_video_create(client,
                               resource_group_name,
                               account_name,
                               video_name,
                               title=None,
                               description=None,
                               retention_period=None,
                               segment_length=None):
    parameters = {}
    if title is not None:
        parameters['title'] = title
    if description is not None:
        parameters['description'] = description
    parameters['archival'] = {}
    if retention_period is not None:
        parameters['archival']['retention_period'] = retention_period
    if len(parameters['archival']) == 0:
        del parameters['archival']
    parameters['media_info'] = {}
    if segment_length is not None:
        parameters['media_info']['segment_length'] = segment_length
    if len(parameters['media_info']) == 0:
        del parameters['media_info']
    return client.create_or_update(resource_group_name=resource_group_name,
                                   account_name=account_name,
                                   video_name=video_name,
                                   parameters=parameters)


def videoanalyzer_video_update(client,
                               resource_group_name,
                               account_name,
                               video_name,
                               title=None,
                               description=None,
                               retention_period=None,
                               segment_length=None):
    parameters = {}
    if title is not None:
        parameters['title'] = title
    if description is not None:
        parameters['description'] = description
    parameters['archival'] = {}
    if retention_period is not None:
        parameters['archival']['retention_period'] = retention_period
    if len(parameters['archival']) == 0:
        del parameters['archival']
    parameters['media_info'] = {}
    if segment_length is not None:
        parameters['media_info']['segment_length'] = segment_length
    if len(parameters['media_info']) == 0:
        del parameters['media_info']
    return client.update(resource_group_name=resource_group_name,
                         account_name=account_name,
                         video_name=video_name,
                         parameters=parameters)


def videoanalyzer_video_delete(client,
                               resource_group_name,
                               account_name,
                               video_name):
    return client.delete(resource_group_name=resource_group_name,
                         account_name=account_name,
                         video_name=video_name)


def videoanalyzer_video_list_content_token(client,
                                           resource_group_name,
                                           account_name,
                                           video_name):
    return client.list_content_token(resource_group_name=resource_group_name,
                                     account_name=account_name,
                                     video_name=video_name)


def videoanalyzer_accesspolicy_list(client,
                                    resource_group_name,
                                    account_name,
                                    top=None):
    return client.list(resource_group_name=resource_group_name,
                       account_name=account_name,
                       top=top)


def videoanalyzer_accesspolicy_show(client,
                                    resource_group_name,
                                    account_name,
                                    access_policy_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      access_policy_name=access_policy_name)


def videoanalyzer_accesspolicy_create(client,
                                      resource_group_name,
                                      account_name,
                                      access_policy_name,
                                      jwtauthentication=None):
    all_authentication = []
    if jwtauthentication is not None:
        all_authentication.append(jwtauthentication)
    if len(all_authentication) > 1:
        raise CLIError('at most one of  jwtauthentication is needed for authentication!')
    authentication = all_authentication[0] if len(all_authentication) == 1 else None
    parameters = {}
    parameters['role'] = "Reader"
    if authentication is not None:
        parameters['authentication'] = authentication
    return client.create_or_update(resource_group_name=resource_group_name,
                                   account_name=account_name,
                                   access_policy_name=access_policy_name,
                                   parameters=parameters)


def videoanalyzer_accesspolicy_update(client,
                                      resource_group_name,
                                      account_name,
                                      access_policy_name,
                                      jwtauthentication=None):
    all_authentication = []
    if jwtauthentication is not None:
        all_authentication.append(jwtauthentication)
    if len(all_authentication) > 1:
        raise CLIError('at most one of  jwtauthentication is needed for authentication!')
    authentication = all_authentication[0] if len(all_authentication) == 1 else None
    parameters = {}
    parameters['role'] = "Reader"
    if authentication is not None:
        parameters['authentication'] = authentication
    return client.update(resource_group_name=resource_group_name,
                         account_name=account_name,
                         access_policy_name=access_policy_name,
                         parameters=parameters)


def videoanalyzer_accesspolicy_delete(client,
                                      resource_group_name,
                                      account_name,
                                      access_policy_name):
    return client.delete(resource_group_name=resource_group_name,
                         account_name=account_name,
                         access_policy_name=access_policy_name)
